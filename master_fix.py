#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ú–ê–°–¢–ï–†-–°–ö–†–ò–ü–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ï–ô–õ–ò–°–¢–û–í
–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å, –±–µ–∑ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–π
"""

import os
import re
from datetime import datetime
from collections import defaultdict

class MasterPlaylistFixer:
    def __init__(self):
        self.categories_dir = "categories"
        self.playlists_dir = "playlists"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_emojis = {
            '18+': 'üîû',
            'fashion': 'üëó', 
            'relax': 'üßò',
            '–¥–µ—Ç—Å–∫–∏–µ': 'üë∂',
            '–∏–Ω—Ñ–æ': '‚ÑπÔ∏è',
            '–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã': 'üé¨',
            '–∫–∏–Ω–æ–∑–∞–ª—ã': 'üé≠',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_2': 'üé™',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_3': 'üé®',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_rutube': 'üìΩÔ∏è',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º': 'üèôÔ∏è',
            '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ': 'üéµ',
            '–Ω–∞—à_—Å–ø–æ—Ä—Ç': 'üèÜ',
            '–Ω–æ–≤–æ—Å—Ç–∏': 'üì∞',
            '–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ': 'üß†',
            '—Ä–∞–¥–∏–æ': 'üìª',
            '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ': 'üéâ',
            '—Ä–∞–∑–Ω–æ–µ': 'üìÇ',
            '—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ': 'üèòÔ∏è',
            '—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ': '‚õ™',
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': '‚öΩ',
            '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å': 'üèõÔ∏è',
            '—ç—Ñ–∏—Ä–Ω—ã–µ': 'üì∫'
        }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        self.category_priority = [
            '–∏–Ω—Ñ–æ', '—ç—Ñ–∏—Ä–Ω—ã–µ', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å', '–Ω–æ–≤–æ—Å—Ç–∏',
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ', '–Ω–∞—à_—Å–ø–æ—Ä—Ç', '–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã',
            '–∫–∏–Ω–æ–∑–∞–ª—ã', '–∫–∏–Ω–æ–∑–∞–ª—ã_2', '–∫–∏–Ω–æ–∑–∞–ª—ã_3', '–∫–∏–Ω–æ–∑–∞–ª—ã_rutube', '–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º',
            '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ', '–¥–µ—Ç—Å–∫–∏–µ', '–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ', '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ',
            '—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ', '—Ä–∞–¥–∏–æ', '—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ', 'relax', 'fashion', '—Ä–∞–∑–Ω–æ–µ', '18+'
        ]
    
    def fix_category_headers(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏"""
        print("üé® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í –ö–ê–¢–ï–ì–û–†–ò–ô")
        print("=" * 40)
        
        if not os.path.exists(self.categories_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.categories_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        fixed_count = 0
        category_files = [f for f in os.listdir(self.categories_dir) if f.endswith('.m3u')]
        
        for file_name in sorted(category_files):
            category_name = file_name.replace('.m3u', '')
            file_path = os.path.join(self.categories_dir, file_name)
            
            if self.fix_single_category_header(file_path, category_name):
                fixed_count += 1
        
        print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {fixed_count}/{len(category_files)}")
        return True
    
    def fix_single_category_header(self, file_path, category_name):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.split('\n')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
            channel_count = len([line for line in lines if line.startswith('http')])
            
            if channel_count == 0:
                print(f"‚ö†Ô∏è {category_name}: –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
            emoji = self.category_emojis.get(category_name, 'üìÇ')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            display_name = category_name.replace('_', ' ').title()
            new_header = [
                "#EXTM3U",
                f"{emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {display_name}",
                f"# –ö–∞–Ω–∞–ª–æ–≤: {channel_count}",
                f"# –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                ""
            ]
            
            # –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–π EXTINF)
            content_start = 0
            for i, line in enumerate(lines):
                if line.startswith('#EXTINF'):
                    content_start = i
                    break
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            new_content = '\n'.join(new_header) + '\n'.join(lines[content_start:])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"‚úÖ {emoji} {category_name}: {channel_count} –∫–∞–Ω–∞–ª–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {category_name}: {e}")
            return False
    
    def clean_brazzers_channels(self):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ—Ä–∞–±–æ—á–∏–µ Brazzers –∫–∞–Ω–∞–ª—ã –∏–∑ 18+"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –ù–ï–†–ê–ë–û–ß–ò–• BRAZZERS –ö–ê–ù–ê–õ–û–í")
        print("=" * 40)
        
        file_path = os.path.join(self.categories_dir, '18+.m3u')
        if not os.path.exists(file_path):
            print("‚ùå –§–∞–π–ª 18+.m3u –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.split('\n')
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = f"{file_path}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            new_lines = []
            i = 0
            removed_count = 0
            kept_count = 0
            
            while i < len(lines):
                line = lines[i].strip()
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line.startswith('#EXTINF'):
                    new_lines.append(line)
                    i += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º EXTINF + URL –ø–∞—Ä—É
                extinf_line = line
                url_line = ""
                
                if i + 1 < len(lines):
                    url_line = lines[i + 1].strip()
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ Brazzers –∫–∞–Ω–∞–ª—ã (180sec.flv)
                if 'brazzers' in extinf_line.lower() and '180sec.flv' in url_line:
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {extinf_line.split(',')[-1]}")
                    removed_count += 1
                    i += 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ EXTINF –∏ URL
                    continue
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã
                new_lines.append(extinf_line)
                if url_line:
                    new_lines.append(url_line)
                    kept_count += 1
                
                i += 2 if url_line else 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            for j, line in enumerate(new_lines):
                if line.startswith('# –ö–∞–Ω–∞–ª–æ–≤:'):
                    new_lines[j] = f"# –ö–∞–Ω–∞–ª–æ–≤: {kept_count}"
                    break
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_lines))
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–µ—Ä–∞–±–æ—á–∏—Ö: {removed_count}")
            print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {kept_count}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            return False
    
    def create_perfect_playlist(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç Televizo"""
        print("\nüéØ –°–û–ó–î–ê–ù–ò–ï –ò–î–ï–ê–õ–¨–ù–û–ì–û –ü–õ–ï–ô–õ–ò–°–¢–ê")
        print("=" * 40)
        
        channels = defaultdict(list)
        total_channels = 0
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_files = [f for f in os.listdir(self.categories_dir) if f.endswith('.m3u')]
        
        for file_name in category_files:
            category_name = file_name.replace('.m3u', '')
            file_path = os.path.join(self.categories_dir, file_name)
            
            count = self.read_category_channels(file_path, category_name, channels)
            if count > 0:
                emoji = self.category_emojis.get(category_name, 'üìÇ')
                print(f"   {emoji} {category_name}: {count} –∫–∞–Ω–∞–ª–æ–≤")
                total_channels += count
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
        os.makedirs(self.playlists_dir, exist_ok=True)
        
        # –ü–æ–ª–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
        self.write_playlist(channels, f"{self.playlists_dir}/televizo_main.m3u", 
                          total_channels, include_adult=True, title="–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
        safe_channels = {k: v for k, v in channels.items() if k != '18+'}
        safe_total = total_channels - len(channels.get('18+', []))
        self.write_playlist(safe_channels, f"{self.playlists_dir}/televizo_safe.m3u", 
                          safe_total, include_adult=False, title="–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø")
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å {total_channels} –∫–∞–Ω–∞–ª–∞–º–∏")
        return True
    
    def read_category_channels(self, file_path, category_name, channels):
        """–ß–∏—Ç–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.split('\n')
            count = 0
            
            i = 0
            while i < len(lines):
                line = lines[i].strip()
                
                if line.startswith('#EXTINF'):
                    extinf_line = line
                    i += 1
                    
                    if i < len(lines):
                        url_line = lines[i].strip()
                        if url_line and not url_line.startswith('#'):
                            channels[category_name].append({
                                'extinf': extinf_line,
                                'url': url_line
                            })
                            count += 1
                
                i += 1
            
            return count
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {category_name}: {e}")
            return 0
    
    def write_playlist(self, channels, output_file, total_channels, include_adult=True, title=""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            sorted_categories = []
            for cat in self.category_priority:
                if cat in channels:
                    if not include_adult and cat == '18+':
                        continue
                    sorted_categories.append(cat)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat in sorted(channels.keys()):
                if cat not in sorted_categories:
                    if not include_adult and cat == '18+':
                        continue
                    sorted_categories.append(cat)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                f.write('#EXTM3U url-tvg="https://iptvx.one/epg/epg_lite.xml.gz"\n')
                f.write(f'# üì∫ Televizo IPTV Playlist ({title})\n')
                f.write(f'# –°–æ–∑–¥–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}\n')
                f.write(f'# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n')
                f.write(f'# –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(sorted_categories)}\n')
                f.write(f'# –í–∫–ª—é—á–∞–µ—Ç 18+ –∫–æ–Ω—Ç–µ–Ω—Ç: {"–î–∞" if include_adult else "–ù–µ—Ç"}\n')
                f.write(f'# GitHub: https://github.com/vezunchik9/iptv\n')
                f.write(f'# Telegram: @SHARED_NEW\n\n')
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã
                for category in sorted_categories:
                    category_channels = channels[category]
                    emoji = self.category_emojis.get(category, 'üìÇ')
                    display_name = category.replace('_', ' ').upper()
                    
                    f.write(f'# === {emoji} {display_name} ({len(category_channels)} –∫–∞–Ω–∞–ª–æ–≤) ===\n\n')
                    
                    for channel in category_channels:
                        f.write(f'{channel["extinf"]}\n')
                        f.write(f'{channel["url"]}\n\n')
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {output_file}: {e}")
            return False

def main():
    print("üéØ –ú–ê–°–¢–ï–† –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ï–ô–õ–ò–°–¢–û–í")
    print("=" * 50)
    print("üöÄ –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å!")
    print()
    
    fixer = MasterPlaylistFixer()
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏
    if not fixer.fix_category_headers():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏!")
        return
    
    # 2. –û—á–∏—â–∞–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ Brazzers –∫–∞–Ω–∞–ª—ã
    fixer.clean_brazzers_channels()
    
    # 3. –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
    if fixer.create_perfect_playlist():
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û –ò–î–ï–ê–õ–¨–ù–û!")
        print("\nüìÅ –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        print("   üìÑ playlists/televizo_main.m3u - –ø–æ–ª–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
        print("   üìÑ playlists/televizo_safe.m3u - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
        print("\nüîó GitHub raw —Å—Å—ã–ª–∫–∏:")
        print("   https://raw.githubusercontent.com/vezunchik9/iptv/main/playlists/televizo_main.m3u")
        print("   https://raw.githubusercontent.com/vezunchik9/iptv/main/playlists/televizo_safe.m3u")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤!")

if __name__ == "__main__":
    main()
