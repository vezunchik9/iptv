#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è Televizo
—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
"""

import os
import re
from collections import defaultdict, Counter
from datetime import datetime

class TelevizoPlaylistCreator:
    def __init__(self, source_file):
        self.source_file = source_file
        self.channels = defaultdict(list)
        self.total_channels = 0
        
    def read_source_playlist(self):
        """–ß–∏—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π M3U —Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'iso-8859-1']
            content = None
            
            for encoding in encodings:
                try:
                    with open(self.source_file, 'r', encoding=encoding) as f:
                        content = f.read()
                    print(f"‚úì –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
                    break
                except UnicodeDecodeError:
                    continue
            
            if content is None or len(content.strip()) == 0:
                print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
                return False
            
            lines = content.splitlines()
            current_info = None
            
            for line in lines:
                line = line.strip()
                
                if line.startswith('#EXTINF'):
                    current_info = line
                elif line and not line.startswith('#') and current_info:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel_data = self.parse_extinf_line(current_info, line)
                    if channel_data:
                        category = channel_data['group']
                        self.channels[category].append(channel_data)
                        self.total_channels += 1
                    current_info = None
            
            print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.total_channels} –∫–∞–Ω–∞–ª–æ–≤ –≤ {len(self.channels)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def parse_extinf_line(self, extinf_line, url):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É #EXTINF –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-id
            tvg_id_match = re.search(r'tvg-id="([^"]*)"', extinf_line)
            tvg_id = tvg_id_match.group(1) if tvg_id_match else "no_epg"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-logo
            tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', extinf_line)
            tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º group-title
            group_match = re.search(r'group-title="([^"]*)"', extinf_line)
            group = group_match.group(1) if group_match else "–†–∞–∑–Ω–æ–µ"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π)
            name_match = re.search(r',(.*)$', extinf_line)
            name = name_match.group(1).strip() if name_match else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            catchup_match = re.search(r'catchup="([^"]*)"', extinf_line)
            catchup = catchup_match.group(1) if catchup_match else None
            
            catchup_days_match = re.search(r'catchup-days="([^"]*)"', extinf_line)
            catchup_days = catchup_days_match.group(1) if catchup_days_match else None
            
            return {
                'name': name,
                'url': url,
                'tvg_id': tvg_id,
                'tvg_logo': tvg_logo,
                'group': group,
                'catchup': catchup,
                'catchup_days': catchup_days,
                'original_extinf': extinf_line
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def create_main_playlist(self, output_file="playlists/televizo_main.m3u"):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è Televizo —Å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
        priority_categories = [
            "–ò–ù–§–û", "–≠—Ñ–∏—Ä–Ω—ã–µ", "–ù–æ–≤–æ—Å—Ç–∏", "–°–ø–æ—Ä—Ç", "–ö–∏–Ω–æ", "–ú—É–∑—ã–∫–∞", 
            "–î–µ—Ç—Å–∫–∏–µ", "–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ", "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ"
        ]
        
        sorted_categories = []
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        for cat in priority_categories:
            if cat in self.channels:
                sorted_categories.append(cat)
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for cat in sorted(self.channels.keys()):
            if cat not in sorted_categories:
                sorted_categories.append(cat)
        
        try:
            os.makedirs(os.path.dirname(output_file), exist_ok=True)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                f.write('#EXTM3U url-tvg="https://iptvx.one/epg/epg_lite.xml.gz"\n')
                f.write(f'# Televizo IPTV Playlist\n')
                f.write(f'# –°–æ–∑–¥–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}\n')
                f.write(f'# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {self.total_channels}\n')
                f.write(f'# –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.channels)}\n')
                f.write(f'# GitHub: https://github.com/YOUR_USERNAME/iptv\n\n')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category in sorted_categories:
                    channels_in_category = self.channels[category]
                    f.write(f'# === {category.upper()} ({len(channels_in_category)} –∫–∞–Ω–∞–ª–æ–≤) ===\n\n')
                    
                    for channel in channels_in_category:
                        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É EXTINF –¥–ª—è Televizo
                        extinf = f'#EXTINF:-1'
                        
                        if channel['tvg_id']:
                            extinf += f' tvg-id="{channel["tvg_id"]}"'
                        
                        if channel['tvg_logo']:
                            extinf += f' tvg-logo="{channel["tvg_logo"]}"'
                        
                        extinf += f' group-title="{category}"'
                        
                        if channel['catchup']:
                            extinf += f' catchup="{channel["catchup"]}"'
                            if channel['catchup_days']:
                                extinf += f' catchup-days="{channel["catchup_days"]}"'
                        
                        extinf += f',{channel["name"]}\n'
                        
                        f.write(extinf)
                        f.write(f'{channel["url"]}\n\n')
                
            print(f"‚úì –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False
    
    def create_category_playlists(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            for category, channels in self.channels.items():
                safe_category = re.sub(r'[^\w\-_\.]', '_', category)
                filename = f"categories/{safe_category.lower()}.m3u"
                
                os.makedirs(os.path.dirname(filename), exist_ok=True)
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write('#EXTM3U\n')
                    f.write(f'# –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n')
                    f.write(f'# –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n\n')
                    
                    for channel in channels:
                        f.write(f'{channel["original_extinf"]}\n')
                        f.write(f'{channel["url"]}\n\n')
                
            print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(self.channels)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return False
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        print("\n" + "="*50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ï–ô–õ–ò–°–¢–ê")
        print("="*50)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {self.total_channels}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.channels)}")
        print("\nüìÇ –ö–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        
        for category, channels in sorted(self.channels.items(), key=lambda x: len(x[1]), reverse=True):
            print(f"  {category}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")

def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è Televizo")
    print("="*40)
    
    creator = TelevizoPlaylistCreator("kanal")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    if not creator.read_source_playlist():
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª 'kanal' –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –≤ —Ñ–∞–π–ª 'kanal' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    creator.show_statistics()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
    
    if creator.create_main_playlist():
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è Televizo —Å–æ–∑–¥–∞–Ω")
    
    if creator.create_category_playlists():
        print("‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–∑–¥–∞–Ω—ã")
    
    print(f"\nüéØ –ì–û–¢–û–í–û! –ü–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {creator.total_channels} –∫–∞–Ω–∞–ª–æ–≤")
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:")
    print("  üìÑ playlists/televizo_main.m3u - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è Televizo")
    print("  üìÅ categories/ - –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    print("\nüîó –î–ª—è GitHub –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ raw —Å—Å—ã–ª–∫–∏:")
    print("  https://raw.githubusercontent.com/YOUR_USERNAME/iptv/main/playlists/televizo_main.m3u")

if __name__ == "__main__":
    main()
