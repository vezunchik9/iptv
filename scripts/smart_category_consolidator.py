#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–º–Ω—ã–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã
"""

import os
import re
import json
from pathlib import Path
from collections import defaultdict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SmartCategoryConsolidator:
    def __init__(self, base_dir="/Users/ipont/projects/iptv"):
        self.base_dir = Path(base_dir)
        self.categories_dir = self.base_dir / "categories"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –¥—É–±–ª–µ–π)
        self.final_categories = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ": "üì∫ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ": "üèòÔ∏è –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", 
            "–Ω–æ–≤–æ—Å—Ç–∏": "üì∞ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ": "‚öΩ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ": "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "–¥–µ—Ç—Å–∫–∏–µ": "üë∂ –î–µ—Ç—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã",
            "–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ": "üß† –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ": "üéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã": "üé¨ –ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã",
            "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": "‚õ™ –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "–∏–Ω—Ñ–æ": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
            "—Ä–∞–¥–∏–æ": "üìª –†–∞–¥–∏–æ",
            "18+": "üîû 18+ –∫–æ–Ω—Ç–µ–Ω—Ç",
            "fashion": "üëó –ú–æ–¥–∞ –∏ —Å—Ç–∏–ª—å",
            "relax": "üßò –†–µ–ª–∞–∫—Å –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "–∫–∏–Ω–æ–∑–∞–ª—ã": "üé≠ –ö–∏–Ω–æ–∑–∞–ª—ã",
            "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ": "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–æ–≤—ã–µ
        self.category_mapping = {
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "—ç—Ñ–∏—Ä–Ω—ã–µ": "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ",
            "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å": "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ", 
            "—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ": "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ",
            "–Ω–∞—à_—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_2": "–∫–∏–Ω–æ–∑–∞–ª—ã",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_3": "–∫–∏–Ω–æ–∑–∞–ª—ã", 
            "–∫–∏–Ω–æ–∑–∞–ª—ã_rutube": "–∫–∏–Ω–æ–∑–∞–ª—ã",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º": "–∫–∏–Ω–æ–∑–∞–ª—ã",
            "—Ä–∞–∑–Ω–æ–µ": "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ"
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_keywords = {
            "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ": ["–ø–µ—Ä–≤—ã–π", "—Ä–æ—Å—Å–∏—è", "–Ω—Ç–≤", "—Ç–≤—Ü", "—Ä—Ç—Ä", "–æ—Ä—Ç", "–∫–∞–Ω–∞–ª", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π", "–æ–±—â–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π"],
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ": ["—Ä–µ–≥–∏–æ–Ω", "–æ–±–ª–∞—Å—Ç—å", "–∫—Ä–∞–π", "–≥–æ—Ä–æ–¥", "–º–æ—Å–∫–≤–∞", "—Å–ø–±", "–ø–∏—Ç–µ—Ä", "—É—Ñ–∞", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"],
            "–Ω–æ–≤–æ—Å—Ç–∏": ["–Ω–æ–≤–æ—Å—Ç–∏", "news", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å–æ–±—ã—Ç–∏—è", "—Å–≤–æ–¥–∫–∞", "–≤–µ—Å—Ç–∏", "–∏–Ω—Ç–µ—Ä—Ñ–∞–∫—Å"],
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ": ["—Å–ø–æ—Ä—Ç", "sport", "—Ñ—É—Ç–±–æ–ª", "—Ö–æ–∫–∫–µ–π", "–±–∞—Å–∫–µ—Ç–±–æ–ª", "—Ç–µ–Ω–Ω–∏—Å", "–±–æ–∫—Å", "eurosport", "match"],
            "–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ": ["–º—É–∑—ã–∫–∞", "music", "–º—É–∑", "–ø–µ—Å–Ω—è", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∫–ª—É–±", "–¥–∏—Å–∫–æ", "—Ä–æ–∫", "–ø–æ–ø"],
            "–¥–µ—Ç—Å–∫–∏–µ": ["–¥–µ—Ç—Å–∫–∏–π", "–¥–µ—Ç", "–º—É–ª—å—Ç", "cartoon", "–¥–∏—Å–Ω–µ–π", "nickelodeon", "–∫–∞—Ä—É—Å–µ–ª—å", "–º–∞–ª—ã—à"],
            "–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ": ["–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–Ω–∞—É–∫–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–ø—Ä–∏—Ä–æ–¥–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π", "national geographic"],
            "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ": ["—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", "—é–º–æ—Ä", "–∫–æ–º–µ–¥–∏—è", "—à–æ—É", "—Ç–æ–∫", "—Ä–µ–∞–ª–∏—Ç–∏"],
            "–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã": ["–∫–∏–Ω–æ", "—Ñ–∏–ª—å–º", "—Å–µ—Ä–∏–∞–ª", "movie", "cinema", "hbo", "netflix", "amazon"],
            "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": ["—Ä–µ–ª–∏–≥–∏—è", "–ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ", "—Ü–µ—Ä–∫–æ–≤—å", "–±–æ–≥", "–≤–µ—Ä–∞", "–¥—É—Ö–æ–≤–Ω—ã–π", "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π"],
            "–∏–Ω—Ñ–æ": ["–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å–ø—Ä–∞–≤–∫–∞", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "info"],
            "—Ä–∞–¥–∏–æ": ["—Ä–∞–¥–∏–æ", "radio", "fm", "am", "–≤–æ–ª–Ω–∞", "—Å—Ç–∞–Ω—Ü–∏—è"],
            "18+": ["18+", "adult", "xxx", "porn", "—Å–µ–∫—Å", "—ç—Ä–æ—Ç–∏–∫–∞", "–≤–∑—Ä–æ—Å–ª—ã–π", "brazzers", "redtraffic"],
            "fashion": ["–º–æ–¥–∞", "—Å—Ç–∏–ª—å", "fashion", "–∫—Ä–∞—Å–æ—Ç–∞", "—Å—Ç–∏–ª–∏—Å—Ç", "–¥–∏–∑–∞–π–Ω"],
            "relax": ["—Ä–µ–ª–∞–∫—Å", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–π–æ–≥–∞", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "zen", "relax"],
            "–∫–∏–Ω–æ–∑–∞–ª—ã": ["–∫–∏–Ω–æ–∑–∞–ª", "–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "–∑–∞–ª", "—Ä—É—Ç—É–±", "—Å–∏—Ç–∏", "—ç–¥–µ–º"],
            "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ": ["—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π", "–æ—Å–æ–±—ã–π", "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π", "—ç–∫—Å–∫–ª—é–∑–∏–≤", "–ø—Ä–µ–º–∏—É–º"]
        }
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        self.exclude_keywords = {
            "18+": ["–Ω–æ–≤–æ—Å—Ç–∏", "–¥–µ—Ç—Å–∫–∏–π", "—Ä–µ–ª–∏–≥–∏—è", "—Å–ø–æ—Ä—Ç"],
            "–¥–µ—Ç—Å–∫–∏–µ": ["18+", "adult", "xxx", "porn", "—Å–µ–∫—Å", "—ç—Ä–æ—Ç–∏–∫–∞"],
            "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ": ["18+", "adult", "xxx", "porn", "—Å–µ–∫—Å", "—ç—Ä–æ—Ç–∏–∫–∞"]
        }

    def analyze_channel(self, channel_name, current_category):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        name_lower = channel_name.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        for target_cat, exclude_words in self.exclude_keywords.items():
            if any(word in name_lower for word in exclude_words):
                if current_category != target_cat:
                    return target_cat
        
        # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        best_match = None
        max_score = 0
        
        for category, keywords in self.category_keywords.items():
            score = sum(1 for keyword in keywords if keyword in name_lower)
            if score > max_score:
                max_score = score
                best_match = category
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if max_score >= 2:
            return best_match
        
        # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–∞–±–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return current_category

    def consolidate_categories(self):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É—Å—Ç—Ä–∞–Ω—è—è –¥—É–±–ª–∏"""
        logger.info("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Æ –ö–ê–¢–ï–ì–û–†–ò–ô")
        logger.info("=" * 50)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        all_channels = defaultdict(list)
        
        for category_file in self.categories_dir.glob("*.m3u"):
            if category_file.name == "18+.m3u":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é 18+
                
            category_name = category_file.stem
            logger.info(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {category_name}")
            
            # –ß–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
            channels = self.read_channels_from_file(category_file)
            
            for channel in channels:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
                correct_category = self.analyze_channel(channel['name'], category_name)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if correct_category in self.category_mapping:
                    correct_category = self.category_mapping[correct_category]
                
                all_channels[correct_category].append(channel)
                logger.debug(f"  üì∫ {channel['name']} ‚Üí {correct_category}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.create_consolidated_files(all_channels)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã
        self.cleanup_old_files()
        
        logger.info("‚úÖ –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")

    def read_channels_from_file(self, file_path):
        """–ß–∏—Ç–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ M3U —Ñ–∞–π–ª–∞"""
        channels = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–∞—Ä—Å–∏–º M3U —Ñ–æ—Ä–º–∞—Ç
            lines = content.split('\n')
            i = 0
            while i < len(lines):
                line = lines[i].strip()
                if line.startswith('#EXTINF:'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    extinf = line
                    if i + 1 < len(lines):
                        url = lines[i + 1].strip()
                        if url and not url.startswith('#'):
                            # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                            name_match = re.search(r',(.+)$', extinf)
                            if name_match:
                                name = name_match.group(1).strip()
                                channels.append({
                                    'name': name,
                                    'url': url,
                                    'extinf': extinf
                                })
                i += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return channels

    def create_consolidated_files(self, all_channels):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        logger.info("üìù –°–û–ó–î–ê–ï–ú –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´")
        
        for category, channels in all_channels.items():
            if not channels:
                continue
                
            file_path = self.categories_dir / f"{category}.m3u"
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
            unique_channels = {}
            for channel in channels:
                if channel['url'] not in unique_channels:
                    unique_channels[channel['url']] = channel
            
            channels = list(unique_channels.values())
            
            logger.info(f"  üìÇ {category}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("#EXTM3U\n")
                f.write(f"# {self.final_categories.get(category, category)}\n")
                f.write(f"# –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n")
                f.write(f"# –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.get_current_time()}\n")
                f.write("\n")
                
                for channel in channels:
                    f.write(f"{channel['extinf']}\n")
                    f.write(f"{channel['url']}\n")
                    f.write("\n")

    def cleanup_old_files(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã"""
        logger.info("üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –§–ê–ô–õ–û–í")
        
        files_to_remove = [
            "—ç—Ñ–∏—Ä–Ω—ã–µ.m3u",
            "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å.m3u", 
            "—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ.m3u",
            "–Ω–∞—à_—Å–ø–æ—Ä—Ç.m3u",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_2.m3u",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_3.m3u",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_rutube.m3u",
            "–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º.m3u",
            "—Ä–∞–∑–Ω–æ–µ.m3u"
        ]
        
        for filename in files_to_remove:
            file_path = self.categories_dir / filename
            if file_path.exists():
                file_path.unlink()
                logger.info(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω: {filename}")

    def get_current_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M")

def main():
    consolidator = SmartCategoryConsolidator()
    consolidator.consolidate_categories()

if __name__ == "__main__":
    main()
