#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ IPTV –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π:
1. –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤ (—Å–≤–µ–∂–∏–µ —Å—Å—ã–ª–∫–∏)
2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∫–∞–Ω–∞–ª—ã (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ)
3. –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ
4. –ê–≤—Ç–æ–ø—É—à –≤ Git
"""

import asyncio
import os
import json
import logging
import subprocess
from datetime import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.insert(0, os.path.dirname(__file__))

from real_video_checker import RealVideoChecker
from smart_playlist_parser import SmartPlaylistParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SmartCleanupSystem:
    def __init__(self, config_file='donors_config.json'):
        self.config_file = config_file
        self.video_checker = RealVideoChecker(
            timeout=20,
            max_concurrent=3,
            test_duration=8,
            buffer_threshold=3
        )
        self.smart_parser = SmartPlaylistParser(config_file)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'categories_processed': 0,
            'total_channels_before': 0,
            'total_channels_after_update': 0,
            'total_channels_after_cleanup': 0,
            'channels_added_from_donors': 0,
            'channels_updated_from_donors': 0,
            'channels_removed_broken': 0,
            'processing_time': 0
        }
    
    def create_full_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        backup_dir = f"backups/full_backups/smart_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(backup_dir, exist_ok=True)
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subprocess.run(['cp', '-r', 'categories/', backup_dir + '/'], check=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
            if os.path.exists('playlists/televizo_main.m3u'):
                subprocess.run(['cp', 'playlists/televizo_main.m3u8', backup_dir + '/'], check=False)
            
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: {backup_dir}")
            return backup_dir
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            return None
    
    async def smart_update_from_donors(self):
        """–®–∞–≥ 1: –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤"""
        logger.info("üîÑ –®–ê–ì 1: –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            donors = self.smart_parser.config.get('donors', {})
            
            for donor_name, donor_config in donors.items():
                if not donor_config.get('enabled', True):
                    continue
                    
                logger.info(f"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–Ω–æ—Ä–∞: {donor_name}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
                content = self.smart_parser.download_playlist(donor_config['url'])
                if not content:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –æ—Ç {donor_name}")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
                channels = self.smart_parser.parse_m3u_playlist(content)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ {donor_name}: {len(channels)}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for channel in channels:
                    category = self.smart_parser.categorize_channel(channel)
                    if category:
                        result = self.smart_parser.add_or_update_channel(channel, category)
                        if result == 'added':
                            self.stats['channels_added_from_donors'] += 1
                        elif result == 'updated':
                            self.stats['channels_updated_from_donors'] += 1
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: +{self.stats['channels_added_from_donors']} –Ω–æ–≤—ã—Ö, ~{self.stats['channels_updated_from_donors']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤: {e}")
            raise
    
    async def check_and_cleanup_all_categories(self, categories_dir='categories'):
        """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∫–∞–Ω–∞–ª—ã –∏ —É–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ"""
        logger.info("üßπ –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —É–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ...")
        
        if not os.path.exists(categories_dir):
            logger.error(f"–ü–∞–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {categories_dir}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_files = []
        for file in os.listdir(categories_dir):
            if file.endswith('.m3u') and not file.startswith('.'):
                category_files.append(os.path.join(categories_dir, file))
        
        if not category_files:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(category_files)}")
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–æ –æ—á–∏—Å—Ç–∫–∏
        for category_file in category_files:
            try:
                with open(category_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                channel_count = len([line for line in content.splitlines() 
                                   if line.strip() and not line.startswith('#')])
                self.stats['total_channels_after_update'] += channel_count
            except:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cleanup_reports = []
        
        for category_file in category_files:
            try:
                logger.info(f"üé¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {os.path.basename(category_file)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º
                cleanup_report = await self.video_checker.check_playlist_and_cleanup(category_file)
                
                if cleanup_report and 'error' not in cleanup_report:
                    cleanup_reports.append(cleanup_report)
                    self.stats['channels_removed_broken'] += cleanup_report['broken_channels']
                    self.stats['categories_processed'] += 1
                    
                    logger.info(f"‚úÖ {os.path.basename(category_file)}: {cleanup_report['working_channels']}/{cleanup_report['total_channels']} –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {category_file}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {category_file}: {e}")
                continue
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        for category_file in category_files:
            try:
                with open(category_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                channel_count = len([line for line in content.splitlines() 
                                   if line.strip() and not line.startswith('#')])
                self.stats['total_channels_after_cleanup'] += channel_count
            except:
                pass
        
        return cleanup_reports
    
    def update_main_playlist(self):
        """–®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"""
        logger.info("üìù –®–ê–ì 3: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç...")
        
        try:
            result = subprocess.run(
                ['python3', 'scripts/create_televizo_playlist.py'],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {result.stderr}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
    
    def git_commit_and_push(self, backup_dir):
        """–®–∞–≥ 4: –ö–æ–º–º–∏—Ç –∏ –ø—É—à –≤ Git"""
        logger.info("üöÄ –®–ê–ì 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(['git', 'add', '.'], check=True, cwd='.')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            result = subprocess.run(['git', 'diff', '--cached', '--name-only'], 
                                  capture_output=True, text=True, cwd='.')
            
            if not result.stdout.strip():
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
                return False
            
            changes = result.stdout.strip().split('\n')
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(changes)}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
            commit_msg = f"""ü§ñ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ ({timestamp})

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['categories_processed']}
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤: {self.stats['channels_added_from_donors']}
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤: {self.stats['channels_updated_from_donors']}
‚Ä¢ –ù–µ—Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {self.stats['channels_removed_broken']}
‚Ä¢ –ò—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {self.stats['total_channels_after_cleanup']}

üîÑ –ü—Ä–æ—Ü–µ—Å—Å:
1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
2. –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
3. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Git push

üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: {os.path.basename(backup_dir)}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—á–∏—Å—Ç–∫–∏"""

            subprocess.run(['git', 'commit', '-m', commit_msg], check=True, cwd='.')
            logger.info("üíæ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –ü—É—à–∏–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            subprocess.run(['git', 'push', 'origin', 'main'], check=True, cwd='.')
            logger.info("üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Git: {e}")
            return False
    
    async def run_full_smart_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        start_time = datetime.now()
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –£–ú–ù–û–ô –û–ß–ò–°–¢–ö–ò –ü–õ–ï–ô–õ–ò–°–¢–û–í")
        logger.info("=" * 60)
        
        try:
            # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            categories_dir = 'categories'
            if os.path.exists(categories_dir):
                for file in os.listdir(categories_dir):
                    if file.endswith('.m3u') and not file.startswith('.'):
                        try:
                            with open(os.path.join(categories_dir, file), 'r', encoding='utf-8') as f:
                                content = f.read()
                            channel_count = len([line for line in content.splitlines() 
                                               if line.strip() and not line.startswith('#')])
                            self.stats['total_channels_before'] += channel_count
                        except:
                            pass
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
            backup_dir = self.create_full_backup()
            if not backup_dir:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é.")
                return
            
            # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤
            await self.smart_update_from_donors()
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            cleanup_reports = await self.check_and_cleanup_all_categories()
            
            # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
            self.update_main_playlist()
            
            # –®–∞–≥ 4: Git commit –∏ push
            git_success = self.git_commit_and_push(backup_dir)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.stats['processing_time'] = (datetime.now() - start_time).total_seconds()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_final_stats(backup_dir, git_success)
            
            logger.info("üéâ –ü–û–õ–ù–ê–Ø –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
    
    def print_final_stats(self, backup_dir, git_success):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ú–ù–û–ô –û–ß–ò–°–¢–ö–ò")
        print("=" * 70)
        print(f"üóÇÔ∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['categories_processed']}")
        print(f"üìä –ö–∞–Ω–∞–ª–æ–≤ –±—ã–ª–æ: {self.stats['total_channels_before']}")
        print(f"üìà –ö–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.stats['total_channels_after_update']}")
        print(f"üìâ –ö–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {self.stats['total_channels_after_cleanup']}")
        print()
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤: {self.stats['channels_added_from_donors']}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤: {self.stats['channels_updated_from_donors']}")
        print(f"‚ùå –£–¥–∞–ª–µ–Ω–æ –Ω–µ—Ä–∞–±–æ—á–∏—Ö: {self.stats['channels_removed_broken']}")
        print()
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.stats['processing_time']:.1f} —Å–µ–∫")
        print(f"üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: {os.path.basename(backup_dir)}")
        print(f"üöÄ Git push: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if git_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if self.stats['total_channels_before'] > 0:
            net_change = self.stats['total_channels_after_cleanup'] - self.stats['total_channels_before']
            print(f"üìà –ò—Ç–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {net_change:+d} –∫–∞–Ω–∞–ª–æ–≤")
        
        print("=" * 70)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("   ‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Å–≤–µ–∂–∏—Ö –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("   ‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        print("   ‚úÖ –ù–µ—Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        print("   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Git")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –±—ç–∫–∞–ø—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("=" * 70)

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ IPTV –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤')
    parser.add_argument('--config', default='donors_config.json', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    
    args = parser.parse_args()
    
    async def run_cleanup():
        system = SmartCleanupSystem(args.config)
        
        if args.dry_run:
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        
        await system.run_full_smart_cleanup()
    
    asyncio.run(run_cleanup())

if __name__ == "__main__":
    main()
