#!/usr/bin/env python3
"""
üéØ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø IPTV –ü–õ–ï–ô–õ–ò–°–¢–ê–ú–ò
==============================================

–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
1. –ë–µ—Ä–µ—Ç –¥–æ–Ω–æ—Ä–æ–≤ –∏–∑ donors_config.json
2. –ü–∞—Ä—Å–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ—Ä–∞–±–æ—á–∏–µ
4. –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
5. –ü—É—à–∏—Ç –≤ Git

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 auto_system.py          # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    python3 auto_system.py --check  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
    python3 auto_system.py --parse  # –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤
"""

import os
import sys
import json
import logging
import argparse
import subprocess
import fcntl
from datetime import datetime
from pathlib import Path

class IPTVAutoSystem:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.lock_file = self.base_dir / '.update.lock'
        self.lock_fd = None
        self.acquire_lock()
        self.setup_logging()
        
    def acquire_lock(self):
        """–°–æ–∑–¥–∞–µ—Ç lock —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
        try:
            self.lock_fd = open(self.lock_file, 'w')
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            self.lock_fd.write(f"{os.getpid()}\n{datetime.now().isoformat()}")
            self.lock_fd.flush()
        except IOError:
            print("‚ùå –û–®–ò–ë–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            print(f"   Lock —Ñ–∞–π–ª: {self.lock_file}")
            if self.lock_file.exists():
                with open(self.lock_file, 'r') as f:
                    content = f.read().strip().split('\n')
                    if content:
                        print(f"   PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {content[0]}")
                        if len(content) > 1:
                            print(f"   –ó–∞–ø—É—â–µ–Ω: {content[1]}")
            sys.exit(1)
    
    def release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç lock —Ñ–∞–π–ª"""
        if self.lock_fd:
            try:
                fcntl.flock(self.lock_fd, fcntl.LOCK_UN)
                self.lock_fd.close()
                self.lock_file.unlink(missing_ok=True)
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ lock: {e}")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.base_dir / 'auto_system.log')
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def run_script(self, script_name, *args):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            cmd = [sys.executable, f"scripts/{script_name}"] + list(args)
            result = subprocess.run(cmd, cwd=self.base_dir, capture_output=True, text=True)
            
            if result.returncode != 0:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ {script_name}: {result.stderr}")
                return False
            
            self.logger.info(f"‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {script_name}: {e}")
            return False
    
    def parse_donors(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        self.logger.info("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤...")
        return self.run_script("playlist_parser.py")
    
    def check_streams(self):
        """–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ—Ä–∞–±–æ—á–∏—Ö"""
        self.logger.info("üîç –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ real_video_checker (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        categories_dir = self.base_dir / "categories"
        for category_file in categories_dir.glob("*.m3u"):
            if category_file.name.startswith('.'):
                continue
                
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {category_file.name}...")
            if not self.run_script("real_video_checker.py", str(category_file)):
                self.logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π {category_file.name}")
        
        return True
    
    def deduplicate_channels(self):
        """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        self.logger.info("‚ö° –ë—ã—Å—Ç—Ä–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤...")
        
        if not self.run_script("fast_deduplicator.py"):
            self.logger.error("–û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
            return False
        
        return True
    
    def build_playlists(self):
        """–°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
        self.logger.info("üì∫ –°–±–æ—Ä–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        if not self.run_script("fix_category_emojis.py"):
            self.logger.warning("–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–º–æ–¥–∑–∏")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
        if not self.run_script("create_full_televizo_playlist.py"):
            self.logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
            return False
        
        return True
    
    def git_push(self):
        """–ü—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git"""
        self.logger.info("üì§ –ü—É—à –≤ Git...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(["git", "add", "."], cwd=self.base_dir, check=True)
            
            # –ö–æ–º–º–∏—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            commit_msg = f"ü§ñ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ {timestamp}"
            subprocess.run(["git", "commit", "-m", commit_msg], cwd=self.base_dir, check=True)
            
            # –ü—É—à
            subprocess.run(["git", "push"], cwd=self.base_dir, check=True)
            
            self.logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ Git")
            return True
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Git: {e}")
            return False
    
    def cleanup_old_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
            for backup_dir in ["backups", "reports"]:
                backup_path = self.base_dir / backup_dir
                if backup_path.exists():
                    files = sorted(backup_path.glob("*"), key=os.path.getmtime, reverse=True)
                    for old_file in files[3:]:  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                        try:
                            if old_file.is_file():
                                old_file.unlink()
                                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file.name}")
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old_file}: {e}")
            return True
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    def full_cycle(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
            self.logger.info("=" * 50)
            
            steps = [
                ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤", self.parse_donors),
                ("–£–º–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è", self.deduplicate_channels),
                ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤", self.check_streams),
                ("–°–±–æ—Ä–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", self.build_playlists),
                ("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", self.cleanup_old_files),
                ("Git push", self.git_push)
            ]
            
            for step_name, step_func in steps:
                self.logger.info(f"‚ñ∂Ô∏è {step_name}...")
                if not step_func():
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                    return False
            
            self.logger.info("üéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            return True
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º lock, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.release_lock()
    
    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ IPTV")
        print("=" * 30)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = list((self.base_dir / "categories").glob("*.m3u"))
        print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ
        main_playlist = self.base_dir / "playlists" / "televizo_main.m3u"
        if main_playlist.exists():
            with open(main_playlist, 'r', encoding='utf-8') as f:
                channels = len([line for line in f if line.startswith('#EXTINF')])
            print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ: {channels}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if main_playlist.exists():
            mtime = datetime.fromtimestamp(main_playlist.stat().st_mtime)
            print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {mtime.strftime('%Y-%m-%d %H:%M')}")
        
        # –î–æ–Ω–æ—Ä—ã
        donors_config = self.base_dir / "donors_config.json"
        if donors_config.exists():
            with open(donors_config, 'r', encoding='utf-8') as f:
                config = json.load(f)
                active_donors = sum(1 for d in config.get('donors', {}).values() if d.get('enabled', False))
            print(f"üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤: {active_donors}")

def main():
    parser = argparse.ArgumentParser(description='IPTV Auto System')
    parser.add_argument('--parse', action='store_true', help='–¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤')
    parser.add_argument('--dedup', action='store_true', help='–¢–æ–ª—å–∫–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤')
    parser.add_argument('--check', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤')
    parser.add_argument('--build', action='store_true', help='–¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
    
    args = parser.parse_args()
    system = IPTVAutoSystem()
    
    if args.status:
        system.status()
    elif args.parse:
        system.parse_donors()
    elif args.dedup:
        system.deduplicate_channels()
    elif args.check:
        system.check_streams()
    elif args.build:
        system.build_playlists()
    else:
        system.full_cycle()

if __name__ == "__main__":
    main()
