#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º –≤ sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'scripts')))

from smart_playlist_parser import SmartPlaylistParser

def create_test_category():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    test_content = """#EXTM3U
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è: —Ç–µ—Å—Ç
# –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

#EXTINF:-1 tvg-id="pervy" tvg-logo="https://example.com/logo1.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
http://old-server.com/first_channel.m3u8

#EXTINF:-1 tvg-id="rossiya1" tvg-logo="https://example.com/logo2.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–†–æ—Å—Å–∏—è 1
http://old-server.com/russia1.m3u8

#EXTINF:-1 tvg-id="ntv" tvg-logo="https://example.com/logo3.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–ù–¢–í
http://old-server.com/ntv.m3u8

"""
    
    os.makedirs("categories", exist_ok=True)
    with open("categories/—Ç–µ—Å—Ç.m3u", "w", encoding="utf-8") as f:
        f.write(test_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å 3 –∫–∞–Ω–∞–ª–∞–º–∏")

def create_test_donor_playlist():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–æ—Ä—Å–∫–∏–π –ø–ª–µ–π–ª–∏—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    test_donor_content = """#EXTM3U

#EXTINF:-1 tvg-id="pervy" tvg-logo="https://newcdn.com/logo1_hd.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª HD
http://new-server.com/first_channel_hd.m3u8

#EXTINF:-1 tvg-id="rossiya1" tvg-logo="https://newcdn.com/logo2_hd.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–†–æ—Å—Å–∏—è 1 HD
http://new-server.com/russia1_hd.m3u8

#EXTINF:-1 tvg-id="sts" tvg-logo="https://newcdn.com/sts.png" group-title="–≠—Ñ–∏—Ä–Ω—ã–µ",–°–¢–° HD
http://new-server.com/sts_hd.m3u8

"""
    
    with open("test_donor.m3u", "w", encoding="utf-8") as f:
        f.write(test_donor_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–æ—Ä—Å–∫–∏–π –ø–ª–µ–π–ª–∏—Å—Ç")

def show_category_before():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–ê–¢–ï–ì–û–†–ò–ò –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    try:
        with open("categories/—Ç–µ—Å—Ç.m3u", "r", encoding="utf-8") as f:
            lines = f.readlines()
        
        for i, line in enumerate(lines, 1):
            if line.strip() and not line.startswith('#'):
                print(f"   {i}: {line.strip()}")
            elif line.startswith('#EXTINF'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                import re
                name_match = re.search(r',([^,]+)$', line)
                name = name_match.group(1).strip() if name_match else 'Unknown'
                print(f"   {i}: üì∫ {name}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")

def show_category_after():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    try:
        with open("categories/—Ç–µ—Å—Ç.m3u", "r", encoding="utf-8") as f:
            lines = f.readlines()
        
        for i, line in enumerate(lines, 1):
            if line.strip() and not line.startswith('#'):
                print(f"   {i}: {line.strip()}")
            elif line.startswith('#EXTINF'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                import re
                name_match = re.search(r',([^,]+)$', line)
                name = name_match.group(1).strip() if name_match else 'Unknown'
                print(f"   {i}: üì∫ {name}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")

def test_smart_update():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    print("üß™ –¢–ï–°–¢ –£–ú–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–°–´–õ–û–ö")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    create_test_category()
    create_test_donor_playlist()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ
    show_category_before()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config = {
        "donors": {
            "TEST_DONOR": {
                "url": "file://" + os.path.abspath("test_donor.m3u"),
                "enabled": True,
                "priority": 1
            }
        },
        "category_mapping": {
            "—Ç–µ—Å—Ç": {
                "keywords": ["—ç—Ñ–∏—Ä–Ω—ã–µ", "–ø–µ—Ä–≤—ã–π", "—Ä–æ—Å—Å–∏—è", "–Ω—Ç–≤", "—Å—Ç—Å"],
                "exclude": []
            }
        },
        "update_settings": {
            "update_existing_urls": True,
            "match_by_name": True,
            "match_similarity_threshold": 0.7,
            "backup_before_update": True
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    import json
    with open("test_config.json", "w", encoding="utf-8") as f:
        json.dump(test_config, f, ensure_ascii=False, indent=2)
    
    print("\nüîÑ –ó–ê–ü–£–°–ö–ê–ï–ú –£–ú–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = SmartPlaylistParser("test_config.json")
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å file:// URL
    original_download = parser.download_playlist
    def download_file_url(url, timeout=30):
        if url.startswith("file://"):
            file_path = url[7:]  # –£–±–∏—Ä–∞–µ–º file://
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                return content
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                return None
        else:
            return original_download(url, timeout)
    
    parser.download_playlist = download_file_url
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–Ω–æ—Ä–æ–≤
    parser.process_all_donors()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ
    show_category_after()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ç–∫–∞–ø—ã
    print("\nüíæ –°–û–ó–î–ê–ù–ù–´–ï –ë–≠–ö–ê–ü–´:")
    backup_dir = "backups/categories"
    if os.path.exists(backup_dir):
        for backup_file in os.listdir(backup_dir):
            if backup_file.startswith("—Ç–µ—Å—Ç.m3u.backup"):
                print(f"   üìÅ {backup_file}")
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_files = ["test_donor.m3u", "test_config.json"]
    for file in cleanup_files:
        if os.path.exists(file):
            os.remove(file)
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("\n–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:")
    print("1. üì∫ '–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª' ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª HD' —Å –Ω–æ–≤—ã–º URL")
    print("2. üì∫ '–†–æ—Å—Å–∏—è 1' ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–†–æ—Å—Å–∏—è 1 HD' —Å –Ω–æ–≤—ã–º URL") 
    print("3. üì∫ '–°–¢–° HD' ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª")
    print("4. üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º")

if __name__ == "__main__":
    test_smart_update()
