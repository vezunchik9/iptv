#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ–±-–∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IPTV –∫–∞–Ω–∞–ª–∞–º–∏
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for
import json
import re
import os
import sys
from datetime import datetime
import subprocess
import threading
import time
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ scripts –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('../scripts')

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—â–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
try:
    from stream_checker import StreamChecker, StreamCheckerAPI
    STREAM_CHECKER_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å stream_checker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    STREAM_CHECKER_AVAILABLE = False

app = Flask(__name__)

class IPTVManager:
    def __init__(self, playlist_file):
        self.playlist_file = playlist_file
        self.channels = []
        self.categories = {}
        self.load_channels()
    
    def load_channels(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ M3U —Ñ–∞–π–ª–∞"""
        try:
            with open(self.playlist_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.splitlines()
            current_extinf = None
            
            for i, line in enumerate(lines):
                line = line.strip()
                
                if line.startswith('#EXTINF'):
                    current_extinf = line
                elif line and not line.startswith('#') and current_extinf:
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel_data = self.parse_extinf_line(current_extinf, line, i)
                    if channel_data:
                        self.channels.append(channel_data)
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        category = channel_data['group']
                        if category not in self.categories:
                            self.categories[category] = []
                        self.categories[category].append(len(self.channels) - 1)
                    
                    current_extinf = None
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ {len(self.categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    def parse_extinf_line(self, extinf_line, url, line_number):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É #EXTINF"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-id
            tvg_id_match = re.search(r'tvg-id="([^"]*)"', extinf_line)
            tvg_id = tvg_id_match.group(1) if tvg_id_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-logo
            tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', extinf_line)
            tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º group-title
            group_match = re.search(r'group-title="([^"]*)"', extinf_line)
            group = group_match.group(1) if group_match else "–†–∞–∑–Ω–æ–µ"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            name_match = re.search(r',(.*)$', extinf_line)
            name = name_match.group(1).strip() if name_match else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            return {
                'id': len(self.channels),
                'name': name,
                'url': url,
                'tvg_id': tvg_id,
                'tvg_logo': tvg_logo,
                'group': group,
                'enabled': True,
                'working': None,  # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
                'last_check': None,
                'line_number': line_number,
                'original_extinf': extinf_line
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def save_channels(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ M3U —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_file = f"{self.playlist_file}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            subprocess.run(['cp', self.playlist_file, backup_file])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
            content = '#EXTM3U url-tvg="https://iptvx.one/epg/epg_lite.xml.gz"\n'
            content += f'# Televizo IPTV Playlist\n'
            content += f'# –û–±–Ω–æ–≤–ª–µ–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}\n'
            content += f'# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len([c for c in self.channels if c["enabled"]])}\n'
            content += f'# –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.categories)}\n'
            content += f'# GitHub: https://github.com/vezunchik9/iptv\n\n'
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category in sorted(self.categories.keys()):
                channels_in_category = [self.channels[i] for i in self.categories[category] if self.channels[i]['enabled']]
                
                if channels_in_category:
                    content += f'# === {category} ({len(channels_in_category)} –∫–∞–Ω–∞–ª–æ–≤) ===\n\n'
                    
                    for channel in channels_in_category:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º EXTINF —Å—Ç—Ä–æ–∫—É
                        extinf = f'#EXTINF:-1'
                        if channel['tvg_id']:
                            extinf += f' tvg-id="{channel["tvg_id"]}"'
                        if channel['tvg_logo']:
                            extinf += f' tvg-logo="{channel["tvg_logo"]}"'
                        extinf += f' group-title="{channel["group"]}"'
                        extinf += f',{channel["name"]}\n'
                        
                        content += extinf
                        content += f'{channel["url"]}\n\n'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(self.playlist_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.playlist_file}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É—à–∏–º –Ω–∞ GitHub
            self.push_to_github()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False
    
    def push_to_github(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É—à–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub"""
        try:
            subprocess.run(['git', 'add', '.'], cwd='..', check=True)
            subprocess.run(['git', 'commit', '-m', f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É - {datetime.now().strftime("%d.%m.%Y %H:%M")}'], cwd='..', check=True)
            subprocess.run(['git', 'push', 'origin', 'main'], cwd='..', check=True)
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ GitHub: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
manager = IPTVManager('../playlists/televizo_main.m3u')
stream_checker_api = StreamCheckerAPI() if STREAM_CHECKER_AVAILABLE else None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–∞–Ω–∞–ª–æ–≤"""
    return render_template('index.html', 
                         channels=manager.channels, 
                         categories=list(manager.categories.keys()))

@app.route('/api/channels')
def api_channels():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 50))
    category = request.args.get('category', '')
    search = request.args.get('search', '')
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered_channels = manager.channels
    
    if category:
        filtered_channels = [c for c in filtered_channels if c['group'] == category]
    
    if search:
        search = search.lower()
        filtered_channels = [c for c in filtered_channels if 
                           search in c['name'].lower() or 
                           search in c['group'].lower()]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = (page - 1) * per_page
    end = start + per_page
    
    return jsonify({
        'channels': filtered_channels[start:end],
        'total': len(filtered_channels),
        'page': page,
        'per_page': per_page,
        'categories': list(manager.categories.keys())
    })

@app.route('/api/channel/<int:channel_id>', methods=['PUT'])
def api_update_channel(channel_id):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        data = request.json
        
        if 0 <= channel_id < len(manager.channels):
            channel = manager.channels[channel_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if 'name' in data:
                channel['name'] = data['name']
            if 'url' in data:
                channel['url'] = data['url']
            if 'group' in data:
                old_group = channel['group']
                channel['group'] = data['group']
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                if old_group in manager.categories:
                    if channel_id in manager.categories[old_group]:
                        manager.categories[old_group].remove(channel_id)
                
                if data['group'] not in manager.categories:
                    manager.categories[data['group']] = []
                manager.categories[data['group']].append(channel_id)
                
            if 'enabled' in data:
                channel['enabled'] = data['enabled']
            if 'tvg_logo' in data:
                channel['tvg_logo'] = data['tvg_logo']
            
            return jsonify({'success': True, 'channel': channel})
        else:
            return jsonify({'success': False, 'error': 'Channel not found'}), 404
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/channel/<int:channel_id>/clone', methods=['POST'])
def api_clone_channel(channel_id):
    """API –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        if 0 <= channel_id < len(manager.channels):
            original = manager.channels[channel_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
            clone = original.copy()
            clone['id'] = len(manager.channels)
            clone['name'] = f"{original['name']} (–∫–æ–ø–∏—è)"
            
            manager.channels.append(clone)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if clone['group'] not in manager.categories:
                manager.categories[clone['group']] = []
            manager.categories[clone['group']].append(clone['id'])
            
            return jsonify({'success': True, 'channel': clone})
        else:
            return jsonify({'success': False, 'error': 'Channel not found'}), 404
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/channel/<int:channel_id>', methods=['DELETE'])
def api_delete_channel(channel_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        if 0 <= channel_id < len(manager.channels):
            channel = manager.channels[channel_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if channel['group'] in manager.categories:
                if channel_id in manager.categories[channel['group']]:
                    manager.categories[channel['group']].remove(channel_id)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π (–Ω–µ —É–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤)
            channel['enabled'] = False
            channel['name'] = f"[–£–î–ê–õ–ï–ù] {channel['name']}"
            
            return jsonify({'success': True})
        else:
            return jsonify({'success': False, 'error': 'Channel not found'}), 404
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/save', methods=['POST'])
def api_save():
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        success = manager.save_channels()
        return jsonify({'success': success})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/bulk-action', methods=['POST'])
def api_bulk_action():
    """API –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        data = request.json
        action = data.get('action')
        channel_ids = data.get('channel_ids', [])
        
        if action == 'enable':
            for channel_id in channel_ids:
                if 0 <= channel_id < len(manager.channels):
                    manager.channels[channel_id]['enabled'] = True
                    
        elif action == 'disable':
            for channel_id in channel_ids:
                if 0 <= channel_id < len(manager.channels):
                    manager.channels[channel_id]['enabled'] = False
                    
        elif action == 'change_group':
            new_group = data.get('new_group')
            if new_group:
                for channel_id in channel_ids:
                    if 0 <= channel_id < len(manager.channels):
                        channel = manager.channels[channel_id]
                        old_group = channel['group']
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –≥—Ä—É–ø–ø—ã
                        if old_group in manager.categories:
                            if channel_id in manager.categories[old_group]:
                                manager.categories[old_group].remove(channel_id)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                        channel['group'] = new_group
                        if new_group not in manager.categories:
                            manager.categories[new_group] = []
                        manager.categories[new_group].append(channel_id)
        
        return jsonify({'success': True})
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/check-stream/<int:channel_id>', methods=['POST'])
def api_check_single_stream(channel_id):
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    if not STREAM_CHECKER_AVAILABLE:
        return jsonify({'success': False, 'error': 'Stream checker not available'}), 503
    
    try:
        if 0 <= channel_id < len(manager.channels):
            channel = manager.channels[channel_id]
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            checker = StreamChecker(timeout=10)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(
                    checker.check_single_stream(channel_id, channel['url'], detailed=True)
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel['working'] = result['working']
                channel['last_check'] = result['checked_at']
                channel['check_details'] = result.get('details')
                
                return jsonify({
                    'success': True, 
                    'result': result,
                    'channel': channel
                })
                
            finally:
                loop.close()
        else:
            return jsonify({'success': False, 'error': 'Channel not found'}), 404
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/check-all-streams', methods=['POST'])
def api_check_all_streams():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"""
    if not STREAM_CHECKER_AVAILABLE:
        return jsonify({'success': False, 'error': 'Stream checker not available'}), 503
    
    try:
        data = request.json or {}
        detailed = data.get('detailed', False)
        enabled_only = data.get('enabled_only', True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        channels_to_check = []
        for channel in manager.channels:
            if enabled_only and not channel.get('enabled', True):
                continue
            channels_to_check.append({
                'id': channel['id'],
                'name': channel['name'],
                'url': channel['url'],
                'group': channel['group']
            })
        
        if not channels_to_check:
            return jsonify({'success': False, 'error': 'No channels to check'}), 400
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
        def run_check():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                checker = StreamChecker(timeout=10, max_concurrent=10)
                
                def progress_callback(completed, total, result):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                    for channel in manager.channels:
                        if channel['id'] == result['channel_id']:
                            channel['working'] = result['working']
                            channel['last_check'] = result['checked_at']
                            channel['check_details'] = result.get('details')
                            break
                
                results = loop.run_until_complete(
                    checker.check_multiple_streams(
                        channels_to_check, detailed, progress_callback
                    )
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                report_file = f'../reports/stream_check_{timestamp}.json'
                os.makedirs('../reports', exist_ok=True)
                checker.save_results(report_file)
                
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á–µ—Ç: {report_file}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ç–æ–∫–æ–≤: {e}")
            finally:
                loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_check)
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'success': True, 
            'message': f'–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(channels_to_check)} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/stream-stats')
def api_stream_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤"""
    try:
        total_channels = len(manager.channels)
        enabled_channels = sum(1 for c in manager.channels if c.get('enabled', True))
        checked_channels = sum(1 for c in manager.channels if c.get('last_check'))
        working_channels = sum(1 for c in manager.channels if c.get('working') == True)
        broken_channels = sum(1 for c in manager.channels if c.get('working') == False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for channel in manager.channels:
            if not channel.get('enabled', True):
                continue
                
            category = channel.get('group', 'Unknown')
            if category not in category_stats:
                category_stats[category] = {
                    'total': 0,
                    'checked': 0,
                    'working': 0,
                    'broken': 0
                }
            
            category_stats[category]['total'] += 1
            if channel.get('last_check'):
                category_stats[category]['checked'] += 1
                if channel.get('working') == True:
                    category_stats[category]['working'] += 1
                elif channel.get('working') == False:
                    category_stats[category]['broken'] += 1
        
        return jsonify({
            'success': True,
            'stats': {
                'total_channels': total_channels,
                'enabled_channels': enabled_channels,
                'checked_channels': checked_channels,
                'working_channels': working_channels,
                'broken_channels': broken_channels,
                'success_rate': round((working_channels / max(1, checked_channels)) * 100, 2),
                'check_coverage': round((checked_channels / max(1, enabled_channels)) * 100, 2)
            },
            'category_stats': category_stats
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∞–¥–º–∏–Ω–∫–∏ IPTV...")
    print("üìä –ê–¥—Ä–µ—Å: http://localhost:5000")
    app.run(debug=True, host='0.0.0.0', port=5000)
