#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
IPTV System - —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('iptv_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IPTVSystem:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.playlists_dir = self.base_dir / "playlists"
        self.playlists_dir.mkdir(exist_ok=True)
        
    def run_script(self, script_name, *args):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç"""
        script_path = self.base_dir / "scripts" / script_name
        if not script_path.exists():
            logger.error(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
            
        cmd = [sys.executable, str(script_path)] + list(args)
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            if result.returncode == 0:
                logger.info(f"‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {script_name}: {result.stderr}")
                return False
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –≤ {script_name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {script_name}: {e}")
            return False
    
    def parse_donors(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤"""
        logger.info("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤...")
        return self.run_script("playlist_parser.py")
    
    def create_playlist(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        logger.info("üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–ª–µ–π–ª–∏—Å—Ç
            categories_dir = self.base_dir / "categories"
            if not categories_dir.exists():
                logger.error("–ü–∞–ø–∫–∞ categories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False
            
            all_channels = []
            total_channels = 0
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ .m3u —Ñ–∞–π–ª—ã –∏–∑ categories
            for m3u_file in categories_dir.glob("*.m3u"):
                if m3u_file.name.startswith('.'):
                    continue
                    
                logger.info(f"–ß–∏—Ç–∞–µ–º {m3u_file.name}...")
                
                try:
                    with open(m3u_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
                    i = 0
                    while i < len(lines):
                        line = lines[i].strip()
                        if line.startswith('#EXTINF:'):
                            extinf = line
                            # –ò—â–µ–º URL –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
                            j = i + 1
                            while j < len(lines):
                                url_line = lines[j].strip()
                                if url_line.startswith('http'):
                                    all_channels.append({
                                        'extinf': extinf,
                                        'url': url_line
                                    })
                                    total_channels += 1
                                    i = j + 1
                                    break
                                elif url_line == '':
                                    j += 1
                                elif url_line.startswith('#'):
                                    j += 1
                                else:
                                    i += 1
                                    break
                            else:
                                i += 1
                        else:
                            i += 1
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {m3u_file.name}: {e}")
                    continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
            playlist_file = self.playlists_dir / "televizo.m3u"
            
            with open(playlist_file, 'w', encoding='utf-8') as f:
                f.write('#EXTM3U url-tvg="https://iptvx.one/epg/epg_lite.xml.gz"\n')
                f.write('# üì∫ Televizo IPTV Playlist\n')
                f.write(f'# –°–æ–∑–¥–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}\n')
                f.write(f'# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n')
                f.write('# GitHub: https://github.com/vezunchik9/iptv\n')
                f.write('# Telegram: @SHARED_NEW\n\n')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
                for channel in all_channels:
                    f.write(f'{channel["extinf"]}\n')
                    f.write(f'{channel["url"]}\n\n')
            
            logger.info(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {playlist_file}")
            logger.info(f"üìä –ö–∞–Ω–∞–ª–æ–≤: {total_channels}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False
    
    def git_push(self):
        """–ü—É—à –≤ Git"""
        logger.info("üì§ –ü—É—à –≤ Git...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(['git', 'add', '.'], check=True, cwd=self.base_dir)
            
            # –ö–æ–º–º–∏—Ç
            commit_msg = f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            subprocess.run(['git', 'commit', '-m', commit_msg], check=True, cwd=self.base_dir)
            
            # –ü—É—à
            subprocess.run(['git', 'push'], check=True, cwd=self.base_dir)
            
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ Git")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Git: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Git: {e}")
            return False
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 30)
        
        playlist_file = self.playlists_dir / "televizo.m3u"
        
        if playlist_file.exists():
            with open(playlist_file, 'r', encoding='utf-8') as f:
                channels = len([line for line in f if line.startswith('http')])
            logger.info(f"üì∫ televizo.m3u: {channels} –∫–∞–Ω–∞–ª–æ–≤")
            
            size = playlist_file.stat().st_size / 1024
            logger.info(f"üìÅ –†–∞–∑–º–µ—Ä: {size:.1f} KB")
        else:
            logger.warning("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ IPTV SYSTEM")
        logger.info("=" * 30)
        logger.info("üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
        logger.info("")
        
        steps = [
            ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤", self.parse_donors),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞", self.create_playlist),
            ("Git push", self.git_push)
        ]
        
        for step_name, step_func in steps:
            logger.info(f"‚ñ∂Ô∏è {step_name}...")
            if not step_func():
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                return False
        
        self.show_statistics()
        logger.info("üéâ –°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True

if __name__ == "__main__":
    system = IPTVSystem()
    success = system.run()
    sys.exit(0 if success else 1)