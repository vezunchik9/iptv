#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ LimeHD.TV
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫–∏ –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ LimeHD
"""

import re
import json
import requests
from datetime import datetime
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class LimeHDParser:
    def __init__(self):
        self.base_url = "https://limehd.tv"
        self.api_url = "https://api.limehd.tv"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Origin': 'https://limehd.tv',
            'Referer': 'https://limehd.tv/'
        })
        
    def get_channels_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API endpoints
            endpoints = [
                f"{self.api_url}/v1/channels",
                f"{self.api_url}/channels",
                f"{self.base_url}/api/channels"
            ]
            
            for endpoint in endpoints:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º endpoint: {endpoint}")
                    response = self.session.get(endpoint, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å {endpoint}")
                        return data
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ {endpoint}: {e}")
                    continue
            
            # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å HTML
            logger.info("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å HTML...")
            return self.parse_html()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return None
    
    def parse_html(self):
        """–ü–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            response = self.session.get(self.base_url, timeout=10)
            html = response.text
            
            # –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–∞–∏–≤–∞—é—Ç)
            patterns = [
                r'window\.__INITIAL_STATE__\s*=\s*({.+?});',
                r'window\.channels\s*=\s*(\[.+?\]);',
                r'var\s+channels\s*=\s*(\[.+?\]);',
            ]
            
            for pattern in patterns:
                match = re.search(pattern, html, re.DOTALL)
                if match:
                    try:
                        data = json.loads(match.group(1))
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ HTML")
                        return data
                    except:
                        continue
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return None
    
    def get_stream_url(self, channel_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            endpoints = [
                f"{self.api_url}/v1/channels/{channel_id}/stream",
                f"{self.api_url}/stream/{channel_id}",
                f"{self.base_url}/api/stream/{channel_id}"
            ]
            
            for endpoint in endpoints:
                try:
                    response = self.session.get(endpoint, timeout=10)
                    if response.status_code == 200:
                        data = response.json()
                        
                        # –ò—â–µ–º URL –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
                        if isinstance(data, dict):
                            stream_url = (
                                data.get('url') or 
                                data.get('stream_url') or 
                                data.get('hls') or
                                data.get('stream', {}).get('url')
                            )
                            if stream_url:
                                return stream_url
                        elif isinstance(data, str):
                            return data
                            
                except:
                    continue
            
            return None
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è {channel_id}: {e}")
            return None
    
    def parse_channels(self):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏"""
        logger.info("üçã –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ LimeHD...")
        
        channels_data = self.get_channels_list()
        if not channels_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
            return []
        
        channels = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if isinstance(channels_data, dict):
            channels_list = (
                channels_data.get('channels') or 
                channels_data.get('data') or 
                channels_data.get('items') or
                []
            )
        elif isinstance(channels_data, list):
            channels_list = channels_data
        else:
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return []
        
        logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_list)}")
        
        for idx, channel in enumerate(channels_list, 1):
            try:
                if isinstance(channel, dict):
                    channel_id = channel.get('id') or channel.get('channel_id')
                    name = channel.get('name') or channel.get('title')
                    category = channel.get('category') or channel.get('group') or '–æ–±—â–∏–µ'
                    logo = channel.get('logo') or channel.get('icon')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫
                    stream_url = channel.get('stream_url') or channel.get('url')
                    
                    if not stream_url and channel_id:
                        stream_url = self.get_stream_url(channel_id)
                    
                    if stream_url and name:
                        channels.append({
                            'name': name,
                            'url': stream_url,
                            'category': category,
                            'logo': logo,
                            'source': 'LimeHD'
                        })
                        
                        if idx % 10 == 0:
                            logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{len(channels_list)}")
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
                continue
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        return channels
    
    def save_to_m3u(self, channels, output_file="limehd_channels.m3u"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ M3U —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output_path = Path(__file__).parent.parent / "categories" / output_file
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write('#EXTM3U\n')
                
                for channel in channels:
                    name = channel['name']
                    url = channel['url']
                    category = channel.get('category', '–æ–±—â–∏–µ')
                    logo = channel.get('logo', '')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º EXTINF —Å—Ç—Ä–æ–∫—É
                    extinf_params = []
                    if logo:
                        extinf_params.append(f'tvg-logo="{logo}"')
                    extinf_params.append(f'group-title="{category}"')
                    
                    params_str = ' '.join(extinf_params)
                    f.write(f'#EXTINF:-1 {params_str},{name}\n')
                    f.write(f'{url}\n')
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è M3U: {e}")
            return False
    
    def generate_report(self, channels):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'source': 'LimeHD',
            'total_channels': len(channels),
            'categories': {},
            'channels': []
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for channel in channels:
            category = channel.get('category', '–æ–±—â–∏–µ')
            if category not in report['categories']:
                report['categories'][category] = 0
            report['categories'][category] += 1
            
            report['channels'].append({
                'name': channel['name'],
                'category': category,
                'has_logo': bool(channel.get('logo'))
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = Path(__file__).parent.parent / "reports" / f"limehd_report_{int(datetime.now().timestamp())}.json"
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "=" * 50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê LIMEHD")
        print("=" * 50)
        print(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {report['total_channels']}")
        print(f"\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in sorted(report['categories'].items(), key=lambda x: x[1], reverse=True):
            print(f"  - {cat}: {count}")
        print("=" * 50 + "\n")
        
        return report

def main():
    parser = LimeHDParser()
    
    # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
    channels = parser.parse_channels()
    
    if channels:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ M3U
        parser.save_to_m3u(channels)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        parser.generate_report(channels)
        
        logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ LimeHD –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
        sys.exit(1)

if __name__ == "__main__":
    import sys
    main()

