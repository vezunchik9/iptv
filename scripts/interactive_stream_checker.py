#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IPTV –ø–æ—Ç–æ–∫–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–ª–µ–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import subprocess
import json
import time
import re
import os
import signal
from datetime import datetime
from urllib.parse import urlparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class InteractiveStreamChecker:
    def __init__(self, visual_mode=False, test_duration=10, show_player=False):
        self.visual_mode = visual_mode
        self.test_duration = test_duration
        self.show_player = show_player
        self.results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.available_tools = self._check_available_tools()
        print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(self.available_tools)}")
        
    def _check_available_tools(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tools = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VLC
        vlc_paths = [
            '/Applications/VLC.app/Contents/MacOS/VLC',  # Mac
            '/usr/local/bin/vlc',                        # Linux/Mac with symlink
            'vlc'                                        # PATH
        ]
        
        for vlc_path in vlc_paths:
            try:
                result = subprocess.run([vlc_path, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    tools.append(f'vlc ({vlc_path})')
                    self.vlc_path = vlc_path
                    break
            except:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl
        try:
            result = subprocess.run(['curl', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                tools.append('curl')
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ffprobe
        try:
            result = subprocess.run(['ffprobe', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                tools.append('ffprobe')
        except:
            pass
        
        return tools
    
    def _print_separator(self, title=""):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        width = 80
        if title:
            title = f" {title} "
            padding = (width - len(title)) // 2
            print("=" * padding + title + "=" * (width - padding - len(title)))
        else:
            print("=" * width)
    
    def _print_status(self, message, status="INFO"):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
        colors = {
            "INFO": "\033[94m",      # –°–∏–Ω–∏–π
            "SUCCESS": "\033[92m",   # –ó–µ–ª–µ–Ω—ã–π
            "WARNING": "\033[93m",   # –ñ–µ–ª—Ç—ã–π
            "ERROR": "\033[91m",     # –ö—Ä–∞—Å–Ω—ã–π
            "RESET": "\033[0m"       # –°–±—Ä–æ—Å
        }
        
        color = colors.get(status, colors["INFO"])
        reset = colors["RESET"]
        
        icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå"
        }
        
        icon = icons.get(status, "‚ÑπÔ∏è")
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        print(f"{color}[{timestamp}] {icon} {message}{reset}")
    
    def _test_with_vlc_visual(self, url, channel_name="Unknown", test_duration=10):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ VLC —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        if not hasattr(self, 'vlc_path'):
            return {
                'method': 'vlc_visual',
                'success': False,
                'working': False,
                'error': 'VLC not found'
            }
        
        self._print_status(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª: {channel_name}")
        self._print_status(f"URL: {url[:60]}...")
        
        try:
            if self.show_player:
                # –ó–∞–ø—É—Å–∫–∞–µ–º VLC —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                self._print_status("–û—Ç–∫—Ä—ã–≤–∞–µ–º VLC –ø–ª–µ–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...", "INFO")
                cmd = [
                    self.vlc_path,
                    '--play-and-exit',
                    '--stop-time', str(test_duration),
                    url
                ]
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º VLC –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                self._print_status("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...", "INFO")
                cmd = [
                    self.vlc_path,
                    '--intf', 'dummy',
                    '--no-video-title-show',
                    '--play-and-exit',
                    '--stop-time', str(test_duration),
                    '--extraintf', 'logger',
                    '--logfile', '/tmp/vlc_test.log',
                    url
                ]
            
            start_time = time.time()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ({test_duration}—Å): ", end="", flush=True)
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                preexec_fn=os.setsid if hasattr(os, 'setsid') else None
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            for i in range(test_duration):
                if process.poll() is not None:
                    break
                print("‚ñà", end="", flush=True)
                time.sleep(1)
            
            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if process.poll() is None:
                try:
                    os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                    process.wait(timeout=3)
                except:
                    process.kill()
            
            duration = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if process.returncode == 0 or (process.returncode == -15):  # SIGTERM —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                self._print_status(f"–ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f}—Å", "SUCCESS")
                working = True
                error = None
            else:
                self._print_status(f"–ü–æ—Ç–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {process.returncode})", "ERROR")
                working = False
                error = f"VLC exit code: {process.returncode}"
            
            return {
                'method': 'vlc_visual',
                'success': True,
                'working': working,
                'duration': duration,
                'exit_code': process.returncode,
                'error': error
            }
            
        except Exception as e:
            self._print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "ERROR")
            return {
                'method': 'vlc_visual',
                'success': False,
                'working': False,
                'duration': 0,
                'error': str(e)
            }
    
    def _test_with_curl_visual(self, url, channel_name="Unknown", test_duration=10):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ curl —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        self._print_status(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ curl: {channel_name}")
        self._print_status(f"URL: {url[:60]}...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            self._print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...", "INFO")
            
            quick_cmd = [
                'curl',
                '-s', '-I',  # HEAD –∑–∞–ø—Ä–æ—Å
                '--max-time', '5',
                '--connect-timeout', '3',
                '--user-agent', 'VLC/3.0.0 LibVLC/3.0.0',
                '--location',
                url
            ]
            
            result = subprocess.run(quick_cmd, capture_output=True, text=True, timeout=8)
            
            if result.returncode != 0:
                self._print_status("–ü–æ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HEAD –∑–∞–ø—Ä–æ—Å)", "ERROR")
                return {
                    'method': 'curl_visual',
                    'success': False,
                    'working': False,
                    'error': 'HEAD request failed'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = result.stdout
            status_line = headers.split('\n')[0] if headers else ""
            
            if '200 OK' in status_line:
                self._print_status("–ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω (200 OK)", "SUCCESS")
            elif any(code in status_line for code in ['301', '302', '307', '308']):
                self._print_status(f"–ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º: {status_line.strip()}", "WARNING")
            else:
                self._print_status(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {status_line.strip()}", "ERROR")
                return {
                    'method': 'curl_visual',
                    'success': False,
                    'working': False,
                    'error': f'Unexpected response: {status_line.strip()}'
                }
            
            # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self._print_status(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö ({test_duration}—Å)...", "INFO")
            
            download_cmd = [
                'curl',
                '-s',
                '--max-time', str(test_duration),
                '--connect-timeout', '5',
                '--user-agent', 'VLC/3.0.0 LibVLC/3.0.0',
                '--location',
                '--write-out', 'SPEED:%{speed_download}|SIZE:%{size_download}|TIME:%{time_total}',
                '--output', '/dev/null',
                url
            ]
            
            start_time = time.time()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ({test_duration}—Å): ", end="", flush=True)
            
            result = subprocess.run(download_cmd, capture_output=True, text=True, timeout=test_duration + 5)
            
            duration = time.time() - start_time
            print("‚ñà" * min(test_duration, 20))  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            
            if result.returncode == 0 and result.stdout:
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                info = {}
                for part in result.stdout.strip().split('|'):
                    if ':' in part:
                        key, value = part.split(':', 1)
                        try:
                            info[key] = float(value)
                        except ValueError:
                            info[key] = value
                
                speed = info.get('SPEED', 0)
                size = info.get('SIZE', 0)
                
                speed_kb = speed / 1024 if speed > 0 else 0
                size_mb = size / (1024 * 1024) if size > 0 else 0
                
                if speed > 10000:  # > 10KB/s
                    self._print_status(f"–ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–∫–æ—Ä–æ—Å—Ç—å: {speed_kb:.1f} KB/s, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {size_mb:.2f} MB", "SUCCESS")
                    working = True
                    error = None
                else:
                    self._print_status(f"–ü–æ—Ç–æ–∫ –º–µ–¥–ª–µ–Ω–Ω—ã–π: {speed_kb:.1f} KB/s", "WARNING")
                    working = False
                    error = f"Low speed: {speed_kb:.1f} KB/s"
                
                return {
                    'method': 'curl_visual',
                    'success': True,
                    'working': working,
                    'duration': duration,
                    'speed_download': speed,
                    'size_download': size,
                    'error': error
                }
            else:
                self._print_status("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "ERROR")
                return {
                    'method': 'curl_visual',
                    'success': False,
                    'working': False,
                    'duration': duration,
                    'error': 'Download failed'
                }
                
        except Exception as e:
            self._print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "ERROR")
            return {
                'method': 'curl_visual',
                'success': False,
                'working': False,
                'duration': 0,
                'error': str(e)
            }
    
    def check_single_stream_interactive(self, channel_id, channel_name, url):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self._print_separator(f"–ö–ê–ù–ê–õ #{channel_id}: {channel_name}")
        
        start_time = time.time()
        
        result = {
            'channel_id': channel_id,
            'channel_name': channel_name,
            'url': url,
            'checked_at': datetime.now().isoformat(),
            'working': False,
            'details': None,
            'error': None
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(self, 'vlc_path') and 'vlc' in ' '.join(self.available_tools):
            self._print_status("–ò—Å–ø–æ–ª—å–∑—É–µ–º VLC –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "INFO")
            test_result = self._test_with_vlc_visual(url, channel_name, self.test_duration)
        else:
            self._print_status("–ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "INFO")
            test_result = self._test_with_curl_visual(url, channel_name, self.test_duration)
        
        result['working'] = test_result.get('working', False)
        result['details'] = test_result
        result['error'] = test_result.get('error')
        result['response_time'] = round((time.time() - start_time) * 1000, 2)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['working']:
            self._print_status(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–∞–Ω–∞–ª –†–ê–ë–û–¢–ê–ï–¢ ({result['response_time']}–º—Å)", "SUCCESS")
        else:
            self._print_status(f"‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–∞–Ω–∞–ª –ù–ï –†–ê–ë–û–¢–ê–ï–¢ ({result['response_time']}–º—Å)", "ERROR")
            if result['error']:
                self._print_status(f"–ü—Ä–∏—á–∏–Ω–∞: {result['error']}", "WARNING")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        return result
    
    def load_channels_from_m3u(self, m3u_file):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ M3U —Ñ–∞–π–ª–∞"""
        channels = []
        
        try:
            with open(m3u_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.splitlines()
            current_extinf = None
            channel_id = 0
            
            for line in lines:
                line = line.strip()
                
                if line.startswith('#EXTINF'):
                    current_extinf = line
                elif line and not line.startswith('#') and current_extinf:
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    name_match = re.search(r',(.*)$', current_extinf)
                    name = name_match.group(1).strip() if name_match else f"Channel {channel_id}"
                    
                    group_match = re.search(r'group-title="([^"]*)"', current_extinf)
                    group = group_match.group(1) if group_match else "Unknown"
                    
                    channels.append({
                        'id': channel_id,
                        'name': name,
                        'url': line,
                        'group': group
                    })
                    
                    channel_id += 1
                    current_extinf = None
            
            return channels
            
        except Exception as e:
            self._print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ M3U: {e}", "ERROR")
            return []
    
    def check_channels_interactive(self, channels, max_channels=None):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        if max_channels:
            channels = channels[:max_channels]
        
        self._print_separator("–ù–ê–ß–ò–ù–ê–ï–ú –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–£–Æ –ü–†–û–í–ï–†–ö–£")
        self._print_status(f"–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        self._print_status(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –∫–∞–∂–¥–æ–≥–æ: {self.test_duration}—Å")
        self._print_status(f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–ª–µ–µ—Ä: {'–î–∞' if self.show_player else '–ù–µ—Ç'}")
        
        input("\nüé¨ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        results = {}
        working_count = 0
        
        for i, channel in enumerate(channels):
            self._print_status(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{len(channels)}", "INFO")
            
            result = self.check_single_stream_interactive(
                channel['id'], 
                channel['name'], 
                channel['url']
            )
            
            results[channel['id']] = result
            
            if result['working']:
                working_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if i < len(channels) - 1:
                if self.visual_mode:
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞...")
                else:
                    time.sleep(1)
        
        self._print_separator("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        self._print_status(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(channels)}")
        self._print_status(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {working_count}")
        self._print_status(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(working_count / len(channels) * 100):.1f}%")
        
        return results

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IPTV –ø–æ—Ç–æ–∫–æ–≤')
    parser.add_argument('m3u_file', help='–ü—É—Ç—å –∫ M3U —Ñ–∞–π–ª—É')
    parser.add_argument('--visual', action='store_true', help='–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–∞—É–∑–∞–º–∏')
    parser.add_argument('--show-player', action='store_true', help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–ª–µ–µ—Ä –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
    parser.add_argument('--test-duration', type=int, default=10, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞')
    parser.add_argument('--max-channels', type=int, help='–ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç–µ–ª—å
    checker = InteractiveStreamChecker(
        visual_mode=args.visual,
        test_duration=args.test_duration,
        show_player=args.show_player
    )
    
    print("üé¨ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê IPTV –ü–û–¢–û–ö–û–í")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
    channels = checker.load_channels_from_m3u(args.m3u_file)
    
    if not channels:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    results = checker.check_channels_interactive(channels, args.max_channels)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"interactive_check_report_{timestamp}.json"
    
    report = {
        'results': results,
        'settings': {
            'visual_mode': args.visual,
            'show_player': args.show_player,
            'test_duration': args.test_duration
        },
        'generated_at': datetime.now().isoformat()
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

if __name__ == "__main__":
    main()
