#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ IPTV —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ—Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
"""

import asyncio
import subprocess
import json
import time
import re
import threading
import queue
import signal
import os
import tempfile
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urlparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RealVideoChecker:
    def __init__(self, timeout=30, max_concurrent=3, test_duration=10, buffer_threshold=3):
        self.timeout = timeout
        self.max_concurrent = max_concurrent
        self.test_duration = test_duration
        self.buffer_threshold = buffer_threshold  # –°–∫–æ–ª—å–∫–æ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–π —Å—á–∏—Ç–∞—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–º
        self.results = {}
        self.checking = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.available_tools = self._check_available_tools()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(self.available_tools)}")
        
        if not self.available_tools:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ!")
            raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg, vlc, –∏–ª–∏ mpv –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤")
    
    def _check_available_tools(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ"""
        tools = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg/ffprobe
        try:
            subprocess.run(['ffprobe', '-version'], capture_output=True, timeout=5)
            tools.append('ffprobe')
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VLC
        try:
            subprocess.run(['vlc', '--version'], capture_output=True, timeout=5)
            tools.append('vlc')
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º mpv
        try:
            subprocess.run(['mpv', '--version'], capture_output=True, timeout=5)
            tools.append('mpv')
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl (–¥–ª—è HLS –∞–Ω–∞–ª–∏–∑–∞)
        try:
            subprocess.run(['curl', '--version'], capture_output=True, timeout=5)
            tools.append('curl')
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        return tools
    
    async def check_video_stream_real(self, url):
        """–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞"""
        logger.info(f"üé¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫: {url}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        methods = []
        
        # –°–Ω–∞—á–∞–ª–∞ curl - –æ–Ω –ª—É—á—à–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏
        if 'curl' in self.available_tools:
            methods.append(self._check_with_curl_video)
        if 'ffprobe' in self.available_tools:
            methods.append(self._check_with_ffprobe)
        if 'vlc' in self.available_tools:
            methods.append(self._check_with_vlc)
        if 'mpv' in self.available_tools:
            methods.append(self._check_with_mpv)
        
        for method in methods:
            try:
                result = await asyncio.get_event_loop().run_in_executor(
                    None, method, url
                )
                
                if result['success']:
                    logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {url} (–º–µ—Ç–æ–¥: {result['method']})")
                    return result
                else:
                    logger.debug(f"‚ùå –ú–µ—Ç–æ–¥ {result['method']} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result.get('error')}")
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {method.__name__}: {e}")
                continue
        
        logger.warning(f"‚ùå –ü–æ—Ç–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {url}")
        return {
            'success': False,
            'working': False,
            'method': 'all_failed',
            'error': '–í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞',
            'details': {}
        }
    
    def _check_with_ffprobe(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ffprobe - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥"""
        try:
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                '-show_streams',
                '-analyzeduration', '3000000',  # 3 —Å–µ–∫—É–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞
                '-probesize', '1000000',       # 1MB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                '-timeout', str(self.timeout * 1000000),  # –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
                url
            ]
            
            start_time = time.time()
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=self.timeout
            )
            duration = time.time() - start_time
            
            if result.returncode == 0:
                try:
                    probe_data = json.loads(result.stdout)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–æ–≤
                    video_streams = [s for s in probe_data.get('streams', []) if s.get('codec_type') == 'video']
                    audio_streams = [s for s in probe_data.get('streams', []) if s.get('codec_type') == 'audio']
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    format_tags = probe_data.get('format', {}).get('tags', {})
                    stream_tags = {}
                    for stream in video_streams + audio_streams:
                        stream_tags.update(stream.get('tags', {}))
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    all_tags = {**format_tags, **stream_tags}
                    tag_text = ' '.join(str(v).lower() for v in all_tags.values())
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    info_patterns = [
                        r'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
                        r'contact.*provider',
                        r'subscription.*required',
                        r'premium.*required',
                        r'–¥–æ—Å—Ç—É–ø.*–∑–∞–ø—Ä–µ—â–µ–Ω',
                        r'access.*denied',
                        r'channel.*unavailable',
                        r'–∫–∞–Ω–∞–ª.*–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        r'personal.*account',
                        r'–ª–∏—á–Ω—ã–π.*–∫–∞–±–∏–Ω–µ—Ç',
                        r'—É–≤–∞–∂–∞–µ–º—ã–π.*–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        r'dear.*user',
                        r'–¥–ª—è.*–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.*–¥–∞–Ω–Ω–æ–≥–æ.*–∫–∞–Ω–∞–ª–∞',
                        r'to.*view.*this.*channel',
                        r'–≤–∞–º.*–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
                        r'you.*need.*to',
                        r'–≤.*–ª–∏—á–Ω–æ–º.*–∫–∞–±–∏–Ω–µ—Ç–µ',
                        r'in.*your.*personal.*account',
                        r'—É–∑–Ω–∞—Ç—å.*–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é',
                        r'find.*out.*additional',
                        r'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                        r'information',
                        r'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞.*–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
                        r'please.*contact',
                        r'–ø–æ–¥–ø–∏—Å–∫–∞.*–∏—Å—Ç–µ–∫–ª–∞',
                        r'subscription.*expired',
                        r'—Ç—Ä–µ–±—É–µ—Ç—Å—è.*–ø–æ–¥–ø–∏—Å–∫–∞',
                        r'subscription.*required',
                        r'–∫–∞–Ω–∞–ª.*–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                        r'channel.*blocked',
                        r'–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*–≤.*–≤–∞—à–µ–º.*—Ä–µ–≥–∏–æ–Ω–µ',
                        r'unavailable.*in.*your.*region'
                    ]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    info_message_count = 0
                    for pattern in info_patterns:
                        info_message_count += len(re.findall(pattern, tag_text, re.IGNORECASE))
                    
                    if info_message_count > 0:
                        return {
                            'success': False,
                            'working': False,
                            'method': 'ffprobe',
                            'duration': duration,
                            'error': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Å–æ–æ–±—â–µ–Ω–∏–π: {info_message_count})',
                            'details': {'info_messages': info_message_count, 'tags_analyzed': len(all_tags)}
                        }
                    
                    if video_streams:
                        video_info = video_streams[0]
                        return {
                            'success': True,
                            'working': True,
                            'method': 'ffprobe',
                            'duration': duration,
                            'details': {
                                'video_codec': video_info.get('codec_name'),
                                'resolution': f"{video_info.get('width')}x{video_info.get('height')}",
                                'fps': video_info.get('r_frame_rate'),
                                'bitrate': probe_data.get('format', {}).get('bit_rate'),
                                'has_audio': len(audio_streams) > 0,
                                'format': probe_data.get('format', {}).get('format_name'),
                                'info_messages': 0
                            },
                            'error': None
                        }
                    else:
                        return {
                            'success': False,
                            'working': False,
                            'method': 'ffprobe',
                            'duration': duration,
                            'error': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∏ –≤ —Å—Ç—Ä–∏–º–µ'
                        }
                        
                except json.JSONDecodeError:
                    return {
                        'success': False,
                        'working': False,
                        'method': 'ffprobe',
                        'duration': duration,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç ffprobe'
                    }
            else:
                error_msg = result.stderr.strip() if result.stderr else 'Unknown error'
                return {
                    'success': False,
                    'working': False,
                    'method': 'ffprobe',
                    'duration': duration,
                    'error': f'ffprobe error: {error_msg}'
                }
                
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'working': False,
                'method': 'ffprobe',
                'duration': self.timeout,
                'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ç–æ–∫–∞'
            }
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'ffprobe',
                'duration': 0,
                'error': str(e)
            }
    
    def _check_with_vlc(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VLC —Å –∞–Ω–∞–ª–∏–∑–æ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ VLC
            with tempfile.NamedTemporaryFile(mode='w+', suffix='.log', delete=False) as log_file:
                log_path = log_file.name
            
            cmd = [
                'vlc',
                '--intf', 'dummy',           # –ë–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                '--quiet',                   # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                '--run-time', str(self.test_duration),  # –í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                '--stop-time', str(self.test_duration),
                '--no-video',               # –ë–µ–∑ –≤–∏–¥–µ–æ–≤—ã–≤–æ–¥–∞
                '--no-audio',               # –ë–µ–∑ –∞—É–¥–∏–æ–≤—ã–≤–æ–¥–∞
                '--logfile', log_path,      # –§–∞–π–ª –ª–æ–≥–æ–≤
                '--verbose', '2',           # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                url,
                'vlc://quit'                # –ê–≤—Ç–æ–≤—ã—Ö–æ–¥
            ]
            
            start_time = time.time()
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=self.timeout
            )
            duration = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ VLC
            buffer_count = 0
            error_count = 0
            info_message_count = 0
            
            try:
                with open(log_path, 'r') as f:
                    log_content = f.read()
                
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—à–∏–±–æ–∫
                buffer_patterns = [
                    r'buffering',
                    r'cache',
                    r'stalled',
                    r'waiting for data',
                    r'prebuffering'
                ]
                
                error_patterns = [
                    r'error',
                    r'failed',
                    r'cannot',
                    r'unable to',
                    r'connection refused'
                ]
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã)
                info_message_patterns = [
                    r'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
                    r'contact.*provider',
                    r'subscription.*required',
                    r'premium.*required',
                    r'–¥–æ—Å—Ç—É–ø.*–∑–∞–ø—Ä–µ—â–µ–Ω',
                    r'access.*denied',
                    r'channel.*unavailable',
                    r'–∫–∞–Ω–∞–ª.*–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    r'personal.*account',
                    r'–ª–∏—á–Ω—ã–π.*–∫–∞–±–∏–Ω–µ—Ç',
                    r'–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é.*–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                    r'additional.*information',
                    r'—É–≤–∞–∂–∞–µ–º—ã–π.*–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    r'dear.*user',
                    r'–¥–ª—è.*–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.*–¥–∞–Ω–Ω–æ–≥–æ.*–∫–∞–Ω–∞–ª–∞',
                    r'to.*view.*this.*channel',
                    r'–≤–∞–º.*–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
                    r'you.*need.*to',
                    r'–≤.*–ª–∏—á–Ω–æ–º.*–∫–∞–±–∏–Ω–µ—Ç–µ',
                    r'in.*your.*personal.*account',
                    r'—É–∑–Ω–∞—Ç—å.*–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é',
                    r'find.*out.*additional',
                    r'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                    r'information',
                    r'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞.*–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
                    r'please.*contact',
                    r'–ø–æ–¥–ø–∏—Å–∫–∞.*–∏—Å—Ç–µ–∫–ª–∞',
                    r'subscription.*expired',
                    r'—Ç—Ä–µ–±—É–µ—Ç—Å—è.*–ø–æ–¥–ø–∏—Å–∫–∞',
                    r'subscription.*required',
                    r'–∫–∞–Ω–∞–ª.*–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    r'channel.*blocked',
                    r'–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*–≤.*–≤–∞—à–µ–º.*—Ä–µ–≥–∏–æ–Ω–µ',
                    r'unavailable.*in.*your.*region'
                ]
                
                for pattern in buffer_patterns:
                    buffer_count += len(re.findall(pattern, log_content, re.IGNORECASE))
                
                for pattern in error_patterns:
                    error_count += len(re.findall(pattern, log_content, re.IGNORECASE))
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for pattern in info_message_patterns:
                    info_message_count += len(re.findall(pattern, log_content, re.IGNORECASE))
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(log_path)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ VLC: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if error_count > 0:
                return {
                    'success': False,
                    'working': False,
                    'method': 'vlc',
                    'duration': duration,
                    'error': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ (–æ—à–∏–±–æ–∫: {error_count})',
                    'details': {'buffer_count': buffer_count, 'error_count': error_count, 'info_messages': info_message_count}
                }
            elif info_message_count > 0:
                return {
                    'success': False,
                    'working': False,
                    'method': 'vlc',
                    'duration': duration,
                    'error': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–π: {info_message_count})',
                    'details': {'buffer_count': buffer_count, 'error_count': error_count, 'info_messages': info_message_count}
                }
            elif buffer_count >= self.buffer_threshold:
                return {
                    'success': False,
                    'working': False,
                    'method': 'vlc',
                    'duration': duration,
                    'error': f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ (–±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–π: {buffer_count})',
                    'details': {'buffer_count': buffer_count, 'error_count': error_count, 'info_messages': info_message_count}
                }
            elif duration < 2:  # –ï—Å–ª–∏ VLC –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                return {
                    'success': False,
                    'working': False,
                    'method': 'vlc',
                    'duration': duration,
                    'error': f'VLC –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f}—Å) - –≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞',
                    'details': {'buffer_count': buffer_count, 'error_count': error_count, 'info_messages': info_message_count}
                }
            else:
                return {
                    'success': True,
                    'working': True,
                    'method': 'vlc',
                    'duration': duration,
                    'details': {'buffer_count': buffer_count, 'error_count': error_count, 'info_messages': info_message_count},
                    'error': None
                }
                
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'working': False,
                'method': 'vlc',
                'duration': self.timeout,
                'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ VLC'
            }
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'vlc',
                'duration': 0,
                'error': str(e)
            }
    
    def _check_with_mpv(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ mpv"""
        try:
            cmd = [
                'mpv',
                '--no-video',               # –ë–µ–∑ –≤–∏–¥–µ–æ–≤—ã–≤–æ–¥–∞
                '--no-audio',               # –ë–µ–∑ –∞—É–¥–∏–æ–≤—ã–≤–æ–¥–∞
                '--length', str(self.test_duration),  # –í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                '--quiet',                  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                '--really-quiet',           # –û—á–µ–Ω—å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
                '--msg-level=all=info',     # –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏–π
                url
            ]
            
            start_time = time.time()
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=self.timeout
            )
            duration = time.time() - start_time
            
            # mpv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            if result.returncode == 0:
                return {
                    'success': True,
                    'working': True,
                    'method': 'mpv',
                    'duration': duration,
                    'details': {},
                    'error': None
                }
            else:
                error_msg = result.stderr.strip() if result.stderr else 'Unknown mpv error'
                return {
                    'success': False,
                    'working': False,
                    'method': 'mpv',
                    'duration': duration,
                    'error': f'mpv error: {error_msg}'
                }
                
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'working': False,
                'method': 'mpv',
                'duration': self.timeout,
                'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ mpv'
            }
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'mpv',
                'duration': 0,
                'error': str(e)
            }
    
    def _check_with_curl_video(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ curl —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–∏–¥–µ–æ–¥–∞–Ω–Ω—ã—Ö"""
        try:
            parsed_url = urlparse(url)
            is_hls = parsed_url.path.endswith('.m3u8') or 'm3u8' in parsed_url.query
            
            if is_hls:
                return self._check_hls_with_curl(url)
            else:
                return self._check_direct_stream_with_curl(url)
                
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'curl',
                'duration': 0,
                'error': str(e)
            }
    
    def _check_hls_with_curl(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HLS –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ curl"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
            cmd_playlist = [
                'curl', '-s', '-L', '--max-time', '10',
                '--user-agent', 'VLC/3.0.0 LibVLC/3.0.0',
                url
            ]
            
            start_time = time.time()
            result = subprocess.run(cmd_playlist, capture_output=True, text=True, timeout=15)
            
            if result.returncode != 0:
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': time.time() - start_time,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HLS –ø–ª–µ–π–ª–∏—Å—Ç'
                }
            
            playlist_content = result.stdout
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            info_patterns = [
                r'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
                r'contact.*provider',
                r'subscription.*required',
                r'premium.*required',
                r'–¥–æ—Å—Ç—É–ø.*–∑–∞–ø—Ä–µ—â–µ–Ω',
                r'access.*denied',
                r'channel.*unavailable',
                r'–∫–∞–Ω–∞–ª.*–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                r'personal.*account',
                r'–ª–∏—á–Ω—ã–π.*–∫–∞–±–∏–Ω–µ—Ç',
                r'—É–≤–∞–∂–∞–µ–º—ã–π.*–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                r'dear.*user',
                r'–¥–ª—è.*–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.*–¥–∞–Ω–Ω–æ–≥–æ.*–∫–∞–Ω–∞–ª–∞',
                r'to.*view.*this.*channel',
                r'–≤–∞–º.*–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
                r'you.*need.*to',
                r'–≤.*–ª–∏—á–Ω–æ–º.*–∫–∞–±–∏–Ω–µ—Ç–µ',
                r'in.*your.*personal.*account',
                r'—É–∑–Ω–∞—Ç—å.*–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é',
                r'find.*out.*additional',
                r'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                r'information',
                r'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞.*–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
                r'please.*contact',
                r'–ø–æ–¥–ø–∏—Å–∫–∞.*–∏—Å—Ç–µ–∫–ª–∞',
                r'subscription.*expired',
                r'—Ç—Ä–µ–±—É–µ—Ç—Å—è.*–ø–æ–¥–ø–∏—Å–∫–∞',
                r'subscription.*required',
                r'–∫–∞–Ω–∞–ª.*–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                r'channel.*blocked',
                r'–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*–≤.*–≤–∞—à–µ–º.*—Ä–µ–≥–∏–æ–Ω–µ',
                r'unavailable.*in.*your.*region'
            ]
            
            info_message_count = 0
            for pattern in info_patterns:
                info_message_count += len(re.findall(pattern, playlist_content, re.IGNORECASE))
            
            if info_message_count > 0:
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': time.time() - start_time,
                    'error': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ (—Å–æ–æ–±—â–µ–Ω–∏–π: {info_message_count})',
                    'details': {'info_messages': info_message_count}
                }
            
            # –ò—â–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
            segment_urls = []
            for line in playlist_content.splitlines():
                line = line.strip()
                if line and not line.startswith('#'):
                    if line.startswith('http'):
                        segment_urls.append(line)
                    else:
                        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL
                        base_url = url.rsplit('/', 1)[0] + '/'
                        segment_urls.append(base_url + line)
            
            if not segment_urls:
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': time.time() - start_time,
                    'error': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–≥–º–µ–Ω—Ç—ã –≤ HLS –ø–ª–µ–π–ª–∏—Å—Ç–µ'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            segments_to_check = segment_urls[:min(3, len(segment_urls))]
            successful_segments = 0
            total_size = 0
            small_segments = 0
            
            for segment_url in segments_to_check:
                cmd_segment = [
                    'curl', '-s', '-L', '--max-time', '5',
                    '--user-agent', 'VLC/3.0.0 LibVLC/3.0.0',
                    '--write-out', '%{http_code}:%{size_download}',
                    '--output', '/dev/null',
                    segment_url
                ]
                
                seg_result = subprocess.run(cmd_segment, capture_output=True, text=True, timeout=10)
                
                if seg_result.returncode == 0:
                    output_parts = seg_result.stdout.strip().split(':')
                    if len(output_parts) >= 2:
                        http_code = int(output_parts[0])
                        size = int(output_parts[1])
                        
                        if http_code == 200:
                            total_size += size
                            if size > 1000:  # –ú–∏–Ω–∏–º—É–º 1KB –¥–ª—è –≤–∏–¥–µ–æ—Å–µ–≥–º–µ–Ω—Ç–∞
                                successful_segments += 1
                            else:
                                small_segments += 1
            
            duration = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
            if small_segments >= 2 and total_size < 500000:  # –ú–µ–Ω—å—à–µ 500KB —Å—É–º–º–∞—Ä–Ω–æ
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': duration,
                    'error': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (—Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç, –º–∞–ª–µ–Ω—å–∫–∏—Ö: {small_segments})',
                    'details': {
                        'segments_checked': len(segments_to_check),
                        'successful_segments': successful_segments,
                        'small_segments': small_segments,
                        'total_size': total_size
                    }
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ, —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            if len(segments_to_check) > 0 and total_size < 100000:  # –ú–µ–Ω—å—à–µ 100KB —Å—É–º–º–∞—Ä–Ω–æ
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': duration,
                    'error': f'–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç) - –≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞',
                    'details': {
                        'segments_checked': len(segments_to_check),
                        'successful_segments': successful_segments,
                        'total_size': total_size
                    }
                }
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
            if successful_segments >= len(segments_to_check) * 0.6:  # 60% —É—Å–ø–µ—à–Ω—ã—Ö
                return {
                    'success': True,
                    'working': True,
                    'method': 'curl_hls',
                    'duration': duration,
                    'details': {
                        'segments_checked': len(segments_to_check),
                        'successful_segments': successful_segments,
                        'success_rate': successful_segments / len(segments_to_check),
                        'total_size': total_size
                    },
                    'error': None
                }
            else:
                return {
                    'success': False,
                    'working': False,
                    'method': 'curl_hls',
                    'duration': duration,
                    'error': f'–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–∞–±–æ—á–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {successful_segments}/{len(segments_to_check)}'
                }
                
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'curl_hls',
                'duration': 0,
                'error': str(e)
            }
    
    def _check_direct_stream_with_curl(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ curl"""
        try:
            cmd = [
                'curl', '-s', '-L',
                '--max-time', str(self.test_duration),
                '--user-agent', 'VLC/3.0.0 LibVLC/3.0.0',
                '--write-out', '%{http_code}:%{size_download}:%{speed_download}',
                '--output', '/dev/null',
                url
            ]
            
            start_time = time.time()
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=self.timeout)
            duration = time.time() - start_time
            
            if result.returncode == 0:
                output_parts = result.stdout.strip().split(':')
                if len(output_parts) >= 3:
                    http_code = int(output_parts[0])
                    size_downloaded = int(float(output_parts[1]))
                    speed = float(output_parts[2])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    if http_code == 200 and size_downloaded > 10000 and speed > 1000:  # 10KB+ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å 1KB/s+
                        return {
                            'success': True,
                            'working': True,
                            'method': 'curl_direct',
                            'duration': duration,
                            'details': {
                                'http_code': http_code,
                                'size_downloaded': size_downloaded,
                                'speed_kbps': speed / 1024
                            },
                            'error': None
                        }
                    else:
                        return {
                            'success': False,
                            'working': False,
                            'method': 'curl_direct',
                            'duration': duration,
                            'error': f'–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–∞: –∫–æ–¥={http_code}, —Ä–∞–∑–º–µ—Ä={size_downloaded}, —Å–∫–æ—Ä–æ—Å—Ç—å={speed:.0f}B/s'
                        }
            
            return {
                'success': False,
                'working': False,
                'method': 'curl_direct',
                'duration': duration,
                'error': '–û—à–∏–±–∫–∞ curl –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
            }
            
        except Exception as e:
            return {
                'success': False,
                'working': False,
                'method': 'curl_direct',
                'duration': 0,
                'error': str(e)
            }
    
    async def check_playlist_and_cleanup(self, playlist_file):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ—Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã"""
        logger.info(f"üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_file}")
        
        if not os.path.exists(playlist_file):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {playlist_file}")
            return {'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ß–∏—Ç–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        try:
            with open(playlist_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return {'error': str(e)}
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
        channels = []
        current_extinf = None
        
        for i, line in enumerate(lines):
            line = line.strip()
            
            if line.startswith('#EXTINF'):
                current_extinf = {'extinf': line, 'line_num': i}
            elif line and not line.startswith('#') and current_extinf:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                name_match = re.search(r',([^,]+)$', current_extinf['extinf'])
                name = name_match.group(1).strip() if name_match else 'Unknown'
                
                channels.append({
                    'name': name,
                    'url': line,
                    'extinf': current_extinf['extinf'],
                    'extinf_line': current_extinf['line_num'],
                    'url_line': i
                })
                current_extinf = None
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(channels)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        working_channels = []
        broken_channels = []
        
        semaphore = asyncio.Semaphore(self.max_concurrent)
        
        async def check_channel(channel):
            async with semaphore:
                result = await self.check_video_stream_real(channel['url'])
                
                if result['working']:
                    working_channels.append(channel)
                    logger.info(f"‚úÖ {channel['name']}: OK")
                else:
                    broken_channels.append({
                        **channel,
                        'check_result': result
                    })
                    logger.warning(f"‚ùå {channel['name']}: {result.get('error', '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        tasks = [check_channel(channel) for channel in channels]
        await asyncio.gather(*tasks)
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_file = f"{playlist_file}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ (–∏–ª–∏ –ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –≤—Å–µ –Ω–µ—Ä–∞–±–æ—á–∏–µ)
        try:
            with open(playlist_file, 'w', encoding='utf-8') as f:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                f.write("#EXTM3U\n")
                f.write(f"# –û—á–∏—â–µ–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
                f.write(f"# –†–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(working_channels)}\n")
                f.write(f"# –£–¥–∞–ª–µ–Ω–æ –Ω–µ—Ä–∞–±–æ—á–∏—Ö: {len(broken_channels)}\n")
                
                if len(working_channels) == 0:
                    f.write("# ‚ö†Ô∏è –í–°–ï –ö–ê–ù–ê–õ–´ –û–ö–ê–ó–ê–õ–ò–°–¨ –ù–ï–†–ê–ë–û–ß–ò–ú–ò –ò –ë–´–õ–ò –£–î–ê–õ–ï–ù–´\n")
                    f.write("# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–æ–Ω–æ—Ä–æ–≤\n")
                
                f.write("\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                for channel in working_channels:
                    f.write(f"{channel['extinf']}\n")
                    f.write(f"{channel['url']}\n\n")
            
            if working_channels:
                logger.info(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω: {len(working_channels)} —Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã! –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç: {playlist_file}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}'}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = {
            'playlist_file': playlist_file,
            'backup_file': backup_file,
            'total_channels': len(channels),
            'working_channels': len(working_channels),
            'broken_channels': len(broken_channels),
            'cleanup_percentage': (len(broken_channels) / len(channels) * 100) if channels else 0,
            'broken_list': [
                {
                    'name': ch['name'],
                    'url': ch['url'],
                    'error': ch['check_result'].get('error', 'Unknown error'),
                    'method': ch['check_result'].get('method', 'unknown')
                }
                for ch in broken_channels
            ]
        }
        
        return report

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ IPTV –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤')
    parser.add_argument('playlist', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–ª–µ–π–ª–∏—Å—Ç–∞')
    parser.add_argument('--timeout', type=int, default=30, help='–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)')
    parser.add_argument('--concurrent', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫')
    parser.add_argument('--test-duration', type=int, default=10, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)')
    parser.add_argument('--buffer-threshold', type=int, default=3, help='–ü–æ—Ä–æ–≥ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    async def run_check():
        checker = RealVideoChecker(
            timeout=args.timeout,
            max_concurrent=args.concurrent,
            test_duration=args.test_duration,
            buffer_threshold=args.buffer_threshold
        )
        
        report = await checker.check_playlist_and_cleanup(args.playlist)
        
        if 'error' in report:
            print(f"‚ùå –û—à–∏–±–∫–∞: {report['error']}")
            return
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –ü–û –û–ß–ò–°–¢–ö–ï –ü–õ–ï–ô–õ–ò–°–¢–ê")
        print("="*60)
        print(f"üìÅ –§–∞–π–ª: {report['playlist_file']}")
        print(f"üíæ –ë—ç–∫–∞–ø: {report['backup_file']}")
        print(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {report['total_channels']}")
        print(f"‚úÖ –†–∞–±–æ—á–∏—Ö: {report['working_channels']}")
        print(f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: {report['broken_channels']}")
        print(f"üßπ –û—á–∏—â–µ–Ω–æ: {report['cleanup_percentage']:.1f}%")
        
        if report['broken_list']:
            print(f"\n‚ùå –£–î–ê–õ–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:")
            for i, broken in enumerate(report['broken_list'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   {i}. {broken['name']}: {broken['error']}")
            
            if len(report['broken_list']) > 10:
                print(f"   ... –∏ –µ—â–µ {len(report['broken_list']) - 10} –∫–∞–Ω–∞–ª–æ–≤")
        
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    asyncio.run(run_check())

if __name__ == "__main__":
    main()
