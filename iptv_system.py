#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è IPTV —Å–∏—Å—Ç–µ–º–∞
–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –¥–æ–Ω–æ—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç
"""

import requests
import re
import json
import os
import subprocess
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('iptv_system.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IPTVSystem:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.donor_url = "https://raw.githubusercontent.com/IPTVSHARED/iptv/refs/heads/main/IPTV_SHARED.m3u"
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.categories = {
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': ['—Å–ø–æ—Ä—Ç', 'sport', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π', '–±–∞—Å–∫–µ—Ç–±–æ–ª', '—Ç–µ–Ω–Ω–∏—Å', '–±–æ–∫—Å', 'eurosport', 'match'],
            '–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã': ['–∫–∏–Ω–æ', 'cinema', 'movie', 'film', '—Å–µ—Ä–∏–∞–ª', 'serial', 'tv1000', 'paramount', 'sony'],
            '–∫–∏–Ω–æ–∑–∞–ª—ã': ['–∫–∏–Ω–æ–∑–∞–ª', 'cineman', 'bcu', 'vip', 'premium', 'megahit', 'comedy', 'action', 'thriller'],
            '—ç—Ñ–∏—Ä–Ω—ã–µ': ['–ø–µ—Ä–≤—ã–π', '—Ä–æ—Å—Å–∏—è', '–Ω—Ç–≤', '—Å—Ç—Å', '—Ç–Ω—Ç', '—Ä–µ–Ω —Ç–≤', '—Ç–≤3', '–ø—è—Ç–Ω–∏—Ü–∞', '—ç—Ñ–∏—Ä–Ω—ã–µ'],
            '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å': ['—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ', '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', '–∫—É–ª—å—Ç—É—Ä–∞', '—Å–ø–∞—Å', '–∑–≤–µ–∑–¥–∞'],
            '–¥–µ—Ç—Å–∫–∏–µ': ['–¥–µ—Ç—Å–∫', 'kids', 'cartoon', 'disney', 'nick', '–∫–∞—Ä—É—Å–µ–ª—å', '–º—É–ª—å—Ç'],
            '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ': ['–º—É–∑—ã–∫', 'music', '–º—É–∑ —Ç–≤', 'mtv', 'bridge', '–∂–∞—Ä-–ø—Ç–∏—Ü–∞'],
            '–Ω–æ–≤–æ—Å—Ç–∏': ['–Ω–æ–≤–æ—Å—Ç', 'news', 'cnn', 'bbc', 'rt', '–¥–æ–∂–¥—å', '–º–µ–¥—É–∑–∞'],
            '–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ': ['–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω', '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω', '–Ω–∞—É–∫–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–ø—Ä–∏—Ä–æ–¥–∞', 'discovery'],
            '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ': ['—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω', '—é–º–æ—Ä', 'comedy', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '—à–æ—É'],
            '—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ': ['—Ä–µ–≥–∏–æ–Ω', '–æ–±–ª–∞—Å—Ç–Ω', '–∫—Ä–∞–µ–≤', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–º–æ—Å–∫–≤', '—Å–ø–±'],
            '—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ': ['—Ä–µ–ª–∏–≥–∏–æ–∑–Ω', '–ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω', '—Ü–µ—Ä–∫–æ–≤–Ω', '–±–æ–≥', '–≤–µ—Ä–∞'],
            '—Ä–∞–¥–∏–æ': ['—Ä–∞–¥–∏–æ', 'radio', 'fm', 'am'],
            '18+': ['18+', 'adult', 'xxx', '–ø–æ—Ä–Ω–æ', '—ç—Ä–æ—Ç–∏–∫–∞']
        }

    def parse_playlist(self):
        """–ü–∞—Ä—Å–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        logger.info("üîÑ –ü–∞—Ä—Å–∏–º –ø–ª–µ–π–ª–∏—Å—Ç...")
        
        try:
            response = requests.get(self.donor_url, timeout=30)
            response.raise_for_status()
            content = response.text
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False

        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
        channels = []
        lines = content.split('\n')
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            if line.startswith('#EXTINF:'):
                extinf = line
                # –ò—â–µ–º URL –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                j = i + 1
                while j < len(lines):
                    url_line = lines[j].strip()
                    if url_line.startswith('http'):
                        channels.append({
                            'extinf': extinf,
                            'url': url_line
                        })
                        i = j + 1
                        break
                    elif url_line == '' or url_line.startswith('#'):
                        j += 1
                    else:
                        i += 1
                        break
                else:
                    i += 1
            else:
                i += 1

        logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_files = {}
        for category, keywords in self.categories.items():
            category_files[category] = []

        for channel in channels:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ EXTINF
            title_match = re.search(r'tvg-name="([^"]*)"', channel['extinf'])
            if title_match:
                title = title_match.group(1).lower()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç tvg-name, –±–µ—Ä–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                title_part = channel['extinf'].split(',', 1)
                if len(title_part) > 1:
                    title = title_part[1].strip().lower()
                else:
                    title = ""

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            assigned = False
            for category, keywords in self.categories.items():
                for keyword in keywords:
                    if keyword.lower() in title:
                        category_files[category].append(channel)
                        assigned = True
                        break
                if assigned:
                    break

            # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –≤ "—Ä–∞–∑–Ω–æ–µ"
            if not assigned:
                if '—Ä–∞–∑–Ω–æ–µ' not in category_files:
                    category_files['—Ä–∞–∑–Ω–æ–µ'] = []
                category_files['—Ä–∞–∑–Ω–æ–µ'].append(channel)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_dir = self.base_dir / "categories"
        categories_dir.mkdir(exist_ok=True)

        for category, channels_list in category_files.items():
            if channels_list:
                file_path = categories_dir / f"{category}.m3u"
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("#EXTM3U\n")
                    for channel in channels_list:
                        f.write(f"{channel['extinf']}\n")
                        f.write(f"{channel['url']}\n")
                
                logger.info(f"‚úÖ {category}: {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤")

        return True

    def create_playlist(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç"""
        logger.info("üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–ª–µ–π–ª–∏—Å—Ç
            categories_dir = self.base_dir / "categories"
            if not categories_dir.exists():
                logger.error("–ü–∞–ø–∫–∞ categories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False

            all_channels = []
            total_channels = 0

            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for m3u_file in categories_dir.glob("*.m3u"):
                if m3u_file.name.startswith('.'):
                    continue
                    
                logger.info(f"–ß–∏—Ç–∞–µ–º {m3u_file.name}...")
                
                try:
                    with open(m3u_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
                    i = 0
                    while i < len(lines):
                        line = lines[i].strip()
                        if line.startswith('#EXTINF:'):
                            extinf = line
                            # –ò—â–µ–º URL –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
                            j = i + 1
                            while j < len(lines):
                                url_line = lines[j].strip()
                                if url_line.startswith('http'):
                                    all_channels.append({
                                        'extinf': extinf,
                                        'url': url_line
                                    })
                                    total_channels += 1
                                    i = j + 1
                                    break
                                elif url_line == '':
                                    j += 1
                                elif url_line.startswith('#'):
                                    j += 1
                                else:
                                    i += 1
                                    break
                            else:
                                i += 1
                        else:
                            i += 1
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {m3u_file}: {e}")
                    continue

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
            main_playlist = self.base_dir / "televizo_main.m3u"
            with open(main_playlist, 'w', encoding='utf-8') as f:
                f.write("#EXTM3U\n")
                for channel in all_channels:
                    f.write(f"{channel['extinf']}\n")
                    f.write(f"{channel['url']}\n")

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç: {total_channels} –∫–∞–Ω–∞–ª–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False

    def git_push(self):
        """–ü—É—à –≤ Git"""
        logger.info("üì§ –ü—É—à –≤ Git...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(['git', 'add', '.'], check=True, cwd=self.base_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            result = subprocess.run(['git', 'diff', '--cached', '--quiet'], cwd=self.base_dir)
            if result.returncode == 0:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
                return True
            
            # –ö–æ–º–º–∏—Ç
            commit_msg = f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            subprocess.run(['git', 'commit', '-m', commit_msg], check=True, cwd=self.base_dir)
            
            # –ü—É—à
            subprocess.run(['git', 'push'], check=True, cwd=self.base_dir)
            
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ Git")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Git: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Git: {e}")
            return False

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
        main_playlist = self.base_dir / "televizo_main.m3u"
        if main_playlist.exists():
            with open(main_playlist, 'r', encoding='utf-8') as f:
                content = f.read()
                channel_count = content.count('#EXTINF:')
                logger.info(f"üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {channel_count}")
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_dir = self.base_dir / "categories"
        if categories_dir.exists():
            category_files = list(categories_dir.glob("*.m3u"))
            logger.info(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_files)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö IPTV –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 50)
        
        # –ü–∞—Ä—Å–∏–º –ø–ª–µ–π–ª–∏—Å—Ç
        if not self.parse_playlist():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        if not self.create_playlist():
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞")
            return False
        
        # –ü—É—à –≤ Git
        self.git_push()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics()
        
        logger.info("‚úÖ –°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        return True

if __name__ == "__main__":
    system = IPTVSystem()
    system.run()