#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ Televizo
–∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–∫–ª—é—á–∞—è 18+ –∫–æ–Ω—Ç–µ–Ω—Ç
"""

import os
import re
from collections import defaultdict
from datetime import datetime

class FullTelevizoPlaylistCreator:
    def __init__(self, categories_dir="categories"):
        self.categories_dir = categories_dir
        self.channels = defaultdict(list)
        self.total_channels = 0
        
        # –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_emojis = {
            '—ç—Ñ–∏—Ä–Ω—ã–µ': 'üì∫',
            '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å': 'üèõÔ∏è',
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': '‚öΩ',
            '–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã': 'üé¨',
            '–∫–∏–Ω–æ–∑–∞–ª—ã': 'üé≠',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_2': 'üé™',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_3': 'üé®',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_rutube': 'üìΩÔ∏è',
            '–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º': 'üèôÔ∏è',
            '–¥–µ—Ç—Å–∫–∏–µ': 'üë∂',
            '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ': 'üéµ',
            '–Ω–æ–≤–æ—Å—Ç–∏': 'üì∞',
            '–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ': 'üß†',
            '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ': 'üéâ',
            '—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ': 'üèòÔ∏è',
            '—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ': '‚õ™',
            '—Ä–∞–¥–∏–æ': 'üìª',
            '18+': 'üîû',
            '–∏–Ω—Ñ–æ': '‚ÑπÔ∏è',
            'relax': 'üßò',
            'fashion': 'üëó',
            '–Ω–∞—à_—Å–ø–æ—Ä—Ç': 'üèÜ',
            '—Ä–∞–∑–Ω–æ–µ': 'üìÇ'
        }
        
    def read_category_file(self, file_path, category_name):
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª—ã"""
        try:
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'iso-8859-1']
            content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        content = f.read()
                    break
                except UnicodeDecodeError:
                    continue
            
            if not content:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path}")
                return 0
            
            lines = content.strip().split('\n')
            channels_count = 0
            
            i = 0
            while i < len(lines):
                line = lines[i].strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line.startswith('#EXTM3U') or line.startswith('#') and not line.startswith('#EXTINF'):
                    i += 1
                    continue
                
                # –ò—â–µ–º EXTINF —Å—Ç—Ä–æ–∫—É
                if line.startswith('#EXTINF'):
                    extinf_line = line
                    i += 1
                    
                    # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å URL
                    if i < len(lines):
                        url_line = lines[i].strip()
                        if url_line and not url_line.startswith('#'):
                            channel = self.parse_channel(extinf_line, url_line, category_name)
                            if channel:
                                self.channels[category_name].append(channel)
                                channels_count += 1
                
                i += 1
            
            return channels_count
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
            return 0
    
    def parse_channel(self, extinf_line, url, category):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ EXTINF —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            name_match = re.search(r',(.+)$', extinf_line)
            name = name_match.group(1).strip() if name_match else "Unknown"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-id
            tvg_id_match = re.search(r'tvg-id="([^"]*)"', extinf_line)
            tvg_id = tvg_id_match.group(1) if tvg_id_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tvg-logo
            tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', extinf_line)
            tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º group-title
            group_title_match = re.search(r'group-title="([^"]*)"', extinf_line)
            group_title = group_title_match.group(1) if group_title_match else category
            
            return {
                'name': name,
                'url': url,
                'tvg_id': tvg_id,
                'tvg_logo': tvg_logo,
                'group_title': group_title,
                'category': category,
                'extinf': extinf_line
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def read_all_categories(self):
        """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not os.path.exists(self.categories_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.categories_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        category_files = [f for f in os.listdir(self.categories_dir) if f.endswith('.m3u')]
        
        if not category_files:
            print(f"‚ùå –§–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.categories_dir}!")
            return False
        
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_files)}")
        
        total_processed = 0
        for file_name in sorted(category_files):
            category_name = file_name.replace('.m3u', '')
            file_path = os.path.join(self.categories_dir, file_name)
            
            channels_count = self.read_category_file(file_path, category_name)
            total_processed += channels_count
            
            emoji = self.category_emojis.get(category_name, 'üìÇ')
            print(f"   {emoji} {category_name}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤")
        
        self.total_channels = total_processed
        print(f"\n‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {self.total_channels}")
        return True
    
    def create_main_playlist(self, output_file="playlists/televizo_main.m3u", include_adult=True):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è Televizo"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        priority_order = [
            "–∏–Ω—Ñ–æ", "—ç—Ñ–∏—Ä–Ω—ã–µ", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ_–ø–ª—é—Å", "–Ω–æ–≤–æ—Å—Ç–∏", 
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ", "–Ω–∞—à_—Å–ø–æ—Ä—Ç", "–∫–∏–Ω–æ_–∏_—Å–µ—Ä–∏–∞–ª—ã", 
            "–∫–∏–Ω–æ–∑–∞–ª—ã", "–∫–∏–Ω–æ–∑–∞–ª—ã_2", "–∫–∏–Ω–æ–∑–∞–ª—ã_3", "–∫–∏–Ω–æ–∑–∞–ª—ã_rutube", "–∫–∏–Ω–æ–∑–∞–ª—ã_—Å–∏—Ç–∏_—ç–¥–µ–º",
            "–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ", "–¥–µ—Ç—Å–∫–∏–µ", "–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ", "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ",
            "—Ä–µ–≥–∏o–Ω–∞–ª—å–Ω—ã–µ", "—Ä–∞–¥–∏–æ", "—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ", "relax", "fashion", "—Ä–∞–∑–Ω–æ–µ"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º 18+ –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if include_adult:
            priority_order.append("18+")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        sorted_categories = []
        for cat in priority_order:
            if cat in self.channels:
                sorted_categories.append(cat)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat in sorted(self.channels.keys()):
            if cat not in sorted_categories:
                if not include_adult and cat == "18+":
                    continue
                sorted_categories.append(cat)
        
        try:
            os.makedirs(os.path.dirname(output_file), exist_ok=True)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                f.write('#EXTM3U url-tvg="https://iptvx.one/epg/epg_lite.xml.gz"\n')
                f.write(f'# üì∫ Televizo IPTV Playlist (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)\n')
                f.write(f'# –°–æ–∑–¥–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}\n')
                f.write(f'# –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {self.total_channels}\n')
                f.write(f'# –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(sorted_categories)}\n')
                f.write(f'# –í–∫–ª—é—á–∞–µ—Ç 18+ –∫–æ–Ω—Ç–µ–Ω—Ç: {"–î–∞" if include_adult else "–ù–µ—Ç"}\n')
                f.write(f'# GitHub: https://github.com/vezunchik9/iptv\n')
                f.write(f'# Telegram: @SHARED_NEW\n\n')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category in sorted_categories:
                    channels_in_category = self.channels[category]
                    emoji = self.category_emojis.get(category, 'üìÇ')
                    
                    f.write(f'# === {emoji} {category.upper().replace("_", " ")} ({len(channels_in_category)} –∫–∞–Ω–∞–ª–æ–≤) ===\n\n')
                    
                    for channel in channels_in_category:
                        f.write(f'{channel["extinf"]}\n')
                        f.write(f'{channel["url"]}\n\n')
            
            print(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–ù–û–ì–û –ü–õ–ï–ô–õ–ò–°–¢–ê")
        print("=" * 50)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {self.total_channels}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.channels)}")
        print("\nüìÇ –ö–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        
        for category, channels in sorted(self.channels.items(), key=lambda x: len(x[1]), reverse=True):
            emoji = self.category_emojis.get(category, 'üìÇ')
            print(f"  {emoji} {category}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")

def main():
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–õ–ï–ô–õ–ò–°–¢–ê TELEVIZO")
    print("=" * 50)
    print("üì∫ –í–∫–ª—é—á–∞–µ—Ç –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–∫–ª—é—á–∞—è 18+ –∫–æ–Ω—Ç–µ–Ω—Ç")
    print()
    
    creator = FullTelevizoPlaylistCreator()
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not creator.read_all_categories():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    creator.show_statistics()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (—Å 18+)
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
    if creator.create_main_playlist("playlists/televizo_main.m3u", include_adult=True):
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω (–≤–∫–ª—é—á–∞—è 18+)")
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (–±–µ–∑ 18+)
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
    if creator.create_main_playlist("playlists/televizo_safe.m3u", include_adult=False):
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω (–±–µ–∑ 18+)")
    
    print(f"\nüéØ –ì–û–¢–û–í–û! –ü–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {creator.total_channels} –∫–∞–Ω–∞–ª–æ–≤")
    print(f"\nüìÅ –§–∞–π–ª—ã:")
    print(f"  üìÑ playlists/televizo_main.m3u - –ø–æ–ª–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (—Å 18+)")
    print(f"  üìÑ playlists/televizo_safe.m3u - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (–±–µ–∑ 18+)")
    print(f"\nüîó GitHub raw —Å—Å—ã–ª–∫–∏:")
    print(f"  https://raw.githubusercontent.com/vezunchik9/iptv/main/playlists/televizo_main.m3u")
    print(f"  https://raw.githubusercontent.com/vezunchik9/iptv/main/playlists/televizo_safe.m3u")

if __name__ == "__main__":
    main()
