#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ IPTV - —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–æ–≤, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simple_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleIPTVSystem:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.playlists_dir = self.base_dir / "playlists"
        self.playlists_dir.mkdir(exist_ok=True)
        
    def run_script(self, script_name, *args):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç"""
        script_path = self.base_dir / "scripts" / script_name
        if not script_path.exists():
            logger.error(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
            
        cmd = [sys.executable, str(script_path)] + list(args)
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            if result.returncode == 0:
                logger.info(f"‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {script_name}: {result.stderr}")
                return False
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –≤ {script_name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {script_name}: {e}")
            return False
    
    def parse_donors(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤"""
        logger.info("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤...")
        return self.run_script("playlist_parser.py")
    
    def deduplicate_channels(self):
        """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è"""
        logger.info("‚ö° –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤...")
        return self.run_script("fast_deduplicator.py")
    
    def create_playlists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
        logger.info("üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç (—Å 18+)
        if not self.run_script("create_full_televizo_playlist.py"):
            return False
            
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (–±–µ–∑ 18+)
        logger.info("üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        return self.create_safe_playlist()
    
    def create_safe_playlist(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –±–µ–∑ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            main_playlist = self.playlists_dir / "televizo_main.m3u"
            safe_playlist = self.playlists_dir / "televizo_safe.m3u"
            
            if not main_playlist.exists():
                logger.error("–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º 18+
            with open(main_playlist, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            safe_lines = []
            skip_next = False
            
            for line in lines:
                if skip_next:
                    skip_next = False
                    continue
                    
                if line.startswith('#EXTINF:'):
                    if '18+' in line or 'üîû' in line:
                        skip_next = True
                        continue
                
                safe_lines.append(line)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
            with open(safe_playlist, 'w', encoding='utf-8') as f:
                f.writelines(safe_lines)
            
            logger.info(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {safe_playlist}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False
    
    def git_push(self):
        """–ü—É—à –≤ Git"""
        logger.info("üì§ –ü—É—à –≤ Git...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(['git', 'add', '.'], check=True, cwd=self.base_dir)
            
            # –ö–æ–º–º–∏—Ç
            commit_msg = f"ü§ñ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            subprocess.run(['git', 'commit', '-m', commit_msg], check=True, cwd=self.base_dir)
            
            # –ü—É—à
            subprocess.run(['git', 'push'], check=True, cwd=self.base_dir)
            
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ Git")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Git: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Git: {e}")
            return False
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ï–ô–õ–ò–°–¢–û–í")
        logger.info("=" * 50)
        
        main_playlist = self.playlists_dir / "televizo_main.m3u"
        safe_playlist = self.playlists_dir / "televizo_safe.m3u"
        
        if main_playlist.exists():
            with open(main_playlist, 'r', encoding='utf-8') as f:
                main_channels = len([line for line in f if line.startswith('http')])
            logger.info(f"üì∫ televizo_main.m3u: {main_channels} –∫–∞–Ω–∞–ª–æ–≤")
        
        if safe_playlist.exists():
            with open(safe_playlist, 'r', encoding='utf-8') as f:
                safe_channels = len([line for line in f if line.startswith('http')])
            logger.info(f"üì∫ televizo_safe.m3u: {safe_channels} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        if main_playlist.exists():
            size = main_playlist.stat().st_size / 1024
            logger.info(f"üìÅ –†–∞–∑–º–µ—Ä main: {size:.1f} KB")
        
        if safe_playlist.exists():
            size = safe_playlist.stat().st_size / 1024
            logger.info(f"üìÅ –†–∞–∑–º–µ—Ä safe: {size:.1f} KB")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê IPTV")
        logger.info("=" * 50)
        logger.info("üì∫ –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
        logger.info("‚ö° –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–æ–≤")
        logger.info("")
        
        steps = [
            ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–Ω–æ—Ä–æ–≤", self.parse_donors),
            ("–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è", self.deduplicate_channels),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", self.create_playlists),
            ("Git push", self.git_push)
        ]
        
        for step_name, step_func in steps:
            logger.info(f"‚ñ∂Ô∏è {step_name}...")
            if not step_func():
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                return False
        
        self.show_statistics()
        logger.info("üéâ –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True

if __name__ == "__main__":
    system = SimpleIPTVSystem()
    success = system.run()
    sys.exit(0 if success else 1)
